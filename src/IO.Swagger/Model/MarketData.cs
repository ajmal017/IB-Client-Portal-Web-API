/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MarketData
    /// </summary>
    [DataContract]
    public partial class MarketData :  IEquatable<MarketData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketData" /> class.
        /// </summary>
        /// <param name="conid">IBKR Contract ID.</param>
        /// <param name="exchange">Exchange.</param>
        /// <param name="minTick">minTick.</param>
        /// <param name="last">last.</param>
        /// <param name="lastSize">lastSize.</param>
        /// <param name="bid">bid.</param>
        /// <param name="bidSize">bidSize.</param>
        /// <param name="ask">ask.</param>
        /// <param name="askSize">askSize.</param>
        public MarketData(decimal? conid = default(decimal?), string exchange = default(string), decimal? minTick = default(decimal?), decimal? last = default(decimal?), decimal? lastSize = default(decimal?), decimal? bid = default(decimal?), decimal? bidSize = default(decimal?), decimal? ask = default(decimal?), decimal? askSize = default(decimal?))
        {
            this.Conid = conid;
            this.Exchange = exchange;
            this.MinTick = minTick;
            this.Last = last;
            this.LastSize = lastSize;
            this.Bid = bid;
            this.BidSize = bidSize;
            this.Ask = ask;
            this.AskSize = askSize;
        }
        
        /// <summary>
        /// IBKR Contract ID
        /// </summary>
        /// <value>IBKR Contract ID</value>
        [DataMember(Name="Conid", EmitDefaultValue=false)]
        public decimal? Conid { get; set; }

        /// <summary>
        /// Exchange
        /// </summary>
        /// <value>Exchange</value>
        [DataMember(Name="Exchange", EmitDefaultValue=false)]
        public string Exchange { get; set; }

        /// <summary>
        /// Gets or Sets MinTick
        /// </summary>
        [DataMember(Name="minTick", EmitDefaultValue=false)]
        public decimal? MinTick { get; set; }

        /// <summary>
        /// Gets or Sets Last
        /// </summary>
        [DataMember(Name="Last", EmitDefaultValue=false)]
        public decimal? Last { get; set; }

        /// <summary>
        /// Gets or Sets LastSize
        /// </summary>
        [DataMember(Name="LastSize", EmitDefaultValue=false)]
        public decimal? LastSize { get; set; }

        /// <summary>
        /// Gets or Sets Bid
        /// </summary>
        [DataMember(Name="Bid", EmitDefaultValue=false)]
        public decimal? Bid { get; set; }

        /// <summary>
        /// Gets or Sets BidSize
        /// </summary>
        [DataMember(Name="BidSize", EmitDefaultValue=false)]
        public decimal? BidSize { get; set; }

        /// <summary>
        /// Gets or Sets Ask
        /// </summary>
        [DataMember(Name="Ask", EmitDefaultValue=false)]
        public decimal? Ask { get; set; }

        /// <summary>
        /// Gets or Sets AskSize
        /// </summary>
        [DataMember(Name="AskSize", EmitDefaultValue=false)]
        public decimal? AskSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarketData {\n");
            sb.Append("  Conid: ").Append(Conid).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  MinTick: ").Append(MinTick).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("  LastSize: ").Append(LastSize).Append("\n");
            sb.Append("  Bid: ").Append(Bid).Append("\n");
            sb.Append("  BidSize: ").Append(BidSize).Append("\n");
            sb.Append("  Ask: ").Append(Ask).Append("\n");
            sb.Append("  AskSize: ").Append(AskSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketData);
        }

        /// <summary>
        /// Returns true if MarketData instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Conid == input.Conid ||
                    (this.Conid != null &&
                    this.Conid.Equals(input.Conid))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.MinTick == input.MinTick ||
                    (this.MinTick != null &&
                    this.MinTick.Equals(input.MinTick))
                ) && 
                (
                    this.Last == input.Last ||
                    (this.Last != null &&
                    this.Last.Equals(input.Last))
                ) && 
                (
                    this.LastSize == input.LastSize ||
                    (this.LastSize != null &&
                    this.LastSize.Equals(input.LastSize))
                ) && 
                (
                    this.Bid == input.Bid ||
                    (this.Bid != null &&
                    this.Bid.Equals(input.Bid))
                ) && 
                (
                    this.BidSize == input.BidSize ||
                    (this.BidSize != null &&
                    this.BidSize.Equals(input.BidSize))
                ) && 
                (
                    this.Ask == input.Ask ||
                    (this.Ask != null &&
                    this.Ask.Equals(input.Ask))
                ) && 
                (
                    this.AskSize == input.AskSize ||
                    (this.AskSize != null &&
                    this.AskSize.Equals(input.AskSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Conid != null)
                    hashCode = hashCode * 59 + this.Conid.GetHashCode();
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.MinTick != null)
                    hashCode = hashCode * 59 + this.MinTick.GetHashCode();
                if (this.Last != null)
                    hashCode = hashCode * 59 + this.Last.GetHashCode();
                if (this.LastSize != null)
                    hashCode = hashCode * 59 + this.LastSize.GetHashCode();
                if (this.Bid != null)
                    hashCode = hashCode * 59 + this.Bid.GetHashCode();
                if (this.BidSize != null)
                    hashCode = hashCode * 59 + this.BidSize.GetHashCode();
                if (this.Ask != null)
                    hashCode = hashCode * 59 + this.Ask.GetHashCode();
                if (this.AskSize != null)
                    hashCode = hashCode * 59 + this.AskSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
