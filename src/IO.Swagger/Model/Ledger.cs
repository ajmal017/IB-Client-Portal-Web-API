/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Ledger
    /// </summary>
    [DataContract]
    public partial class Ledger :  IEquatable<Ledger>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ledger" /> class.
        /// </summary>
        /// <param name="commoditymarketvalue">commoditymarketvalue.</param>
        /// <param name="futuremarketvalue">futuremarketvalue.</param>
        /// <param name="settledcash">settledcash.</param>
        /// <param name="exchangerate">exchangerate.</param>
        /// <param name="sessionid">sessionid.</param>
        /// <param name="cashbalance">cashbalance.</param>
        /// <param name="corporatebondsmarketvalue">corporatebondsmarketvalue.</param>
        /// <param name="warrantsmarketvalue">warrantsmarketvalue.</param>
        /// <param name="netliquidationvalue">netliquidationvalue.</param>
        /// <param name="interest">interest.</param>
        /// <param name="unrealizedpnl">unrealizedpnl.</param>
        /// <param name="stockmarketvalue">stockmarketvalue.</param>
        /// <param name="moneyfunds">moneyfunds.</param>
        /// <param name="currency">currency.</param>
        /// <param name="realizedpnl">realizedpnl.</param>
        /// <param name="funds">funds.</param>
        /// <param name="acctcode">acctcode.</param>
        /// <param name="issueroptionsmarketvalue">issueroptionsmarketvalue.</param>
        /// <param name="key">key.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="severity">severity.</param>
        public Ledger(decimal? commoditymarketvalue = default(decimal?), decimal? futuremarketvalue = default(decimal?), decimal? settledcash = default(decimal?), decimal? exchangerate = default(decimal?), int? sessionid = default(int?), decimal? cashbalance = default(decimal?), decimal? corporatebondsmarketvalue = default(decimal?), decimal? warrantsmarketvalue = default(decimal?), decimal? netliquidationvalue = default(decimal?), decimal? interest = default(decimal?), decimal? unrealizedpnl = default(decimal?), decimal? stockmarketvalue = default(decimal?), decimal? moneyfunds = default(decimal?), string currency = default(string), decimal? realizedpnl = default(decimal?), decimal? funds = default(decimal?), string acctcode = default(string), decimal? issueroptionsmarketvalue = default(decimal?), string key = default(string), int? timestamp = default(int?), int? severity = default(int?))
        {
            this.Commoditymarketvalue = commoditymarketvalue;
            this.Futuremarketvalue = futuremarketvalue;
            this.Settledcash = settledcash;
            this.Exchangerate = exchangerate;
            this.Sessionid = sessionid;
            this.Cashbalance = cashbalance;
            this.Corporatebondsmarketvalue = corporatebondsmarketvalue;
            this.Warrantsmarketvalue = warrantsmarketvalue;
            this.Netliquidationvalue = netliquidationvalue;
            this.Interest = interest;
            this.Unrealizedpnl = unrealizedpnl;
            this.Stockmarketvalue = stockmarketvalue;
            this.Moneyfunds = moneyfunds;
            this.Currency = currency;
            this.Realizedpnl = realizedpnl;
            this.Funds = funds;
            this.Acctcode = acctcode;
            this.Issueroptionsmarketvalue = issueroptionsmarketvalue;
            this.Key = key;
            this.Timestamp = timestamp;
            this.Severity = severity;
        }
        
        /// <summary>
        /// Gets or Sets Commoditymarketvalue
        /// </summary>
        [DataMember(Name="commoditymarketvalue", EmitDefaultValue=false)]
        public decimal? Commoditymarketvalue { get; set; }

        /// <summary>
        /// Gets or Sets Futuremarketvalue
        /// </summary>
        [DataMember(Name="futuremarketvalue", EmitDefaultValue=false)]
        public decimal? Futuremarketvalue { get; set; }

        /// <summary>
        /// Gets or Sets Settledcash
        /// </summary>
        [DataMember(Name="settledcash", EmitDefaultValue=false)]
        public decimal? Settledcash { get; set; }

        /// <summary>
        /// Gets or Sets Exchangerate
        /// </summary>
        [DataMember(Name="exchangerate", EmitDefaultValue=false)]
        public decimal? Exchangerate { get; set; }

        /// <summary>
        /// Gets or Sets Sessionid
        /// </summary>
        [DataMember(Name="sessionid", EmitDefaultValue=false)]
        public int? Sessionid { get; set; }

        /// <summary>
        /// Gets or Sets Cashbalance
        /// </summary>
        [DataMember(Name="cashbalance", EmitDefaultValue=false)]
        public decimal? Cashbalance { get; set; }

        /// <summary>
        /// Gets or Sets Corporatebondsmarketvalue
        /// </summary>
        [DataMember(Name="corporatebondsmarketvalue", EmitDefaultValue=false)]
        public decimal? Corporatebondsmarketvalue { get; set; }

        /// <summary>
        /// Gets or Sets Warrantsmarketvalue
        /// </summary>
        [DataMember(Name="warrantsmarketvalue", EmitDefaultValue=false)]
        public decimal? Warrantsmarketvalue { get; set; }

        /// <summary>
        /// Gets or Sets Netliquidationvalue
        /// </summary>
        [DataMember(Name="netliquidationvalue", EmitDefaultValue=false)]
        public decimal? Netliquidationvalue { get; set; }

        /// <summary>
        /// Gets or Sets Interest
        /// </summary>
        [DataMember(Name="interest", EmitDefaultValue=false)]
        public decimal? Interest { get; set; }

        /// <summary>
        /// Gets or Sets Unrealizedpnl
        /// </summary>
        [DataMember(Name="unrealizedpnl", EmitDefaultValue=false)]
        public decimal? Unrealizedpnl { get; set; }

        /// <summary>
        /// Gets or Sets Stockmarketvalue
        /// </summary>
        [DataMember(Name="stockmarketvalue", EmitDefaultValue=false)]
        public decimal? Stockmarketvalue { get; set; }

        /// <summary>
        /// Gets or Sets Moneyfunds
        /// </summary>
        [DataMember(Name="moneyfunds", EmitDefaultValue=false)]
        public decimal? Moneyfunds { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Realizedpnl
        /// </summary>
        [DataMember(Name="realizedpnl", EmitDefaultValue=false)]
        public decimal? Realizedpnl { get; set; }

        /// <summary>
        /// Gets or Sets Funds
        /// </summary>
        [DataMember(Name="funds", EmitDefaultValue=false)]
        public decimal? Funds { get; set; }

        /// <summary>
        /// Gets or Sets Acctcode
        /// </summary>
        [DataMember(Name="acctcode", EmitDefaultValue=false)]
        public string Acctcode { get; set; }

        /// <summary>
        /// Gets or Sets Issueroptionsmarketvalue
        /// </summary>
        [DataMember(Name="issueroptionsmarketvalue", EmitDefaultValue=false)]
        public decimal? Issueroptionsmarketvalue { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public int? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public int? Severity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ledger {\n");
            sb.Append("  Commoditymarketvalue: ").Append(Commoditymarketvalue).Append("\n");
            sb.Append("  Futuremarketvalue: ").Append(Futuremarketvalue).Append("\n");
            sb.Append("  Settledcash: ").Append(Settledcash).Append("\n");
            sb.Append("  Exchangerate: ").Append(Exchangerate).Append("\n");
            sb.Append("  Sessionid: ").Append(Sessionid).Append("\n");
            sb.Append("  Cashbalance: ").Append(Cashbalance).Append("\n");
            sb.Append("  Corporatebondsmarketvalue: ").Append(Corporatebondsmarketvalue).Append("\n");
            sb.Append("  Warrantsmarketvalue: ").Append(Warrantsmarketvalue).Append("\n");
            sb.Append("  Netliquidationvalue: ").Append(Netliquidationvalue).Append("\n");
            sb.Append("  Interest: ").Append(Interest).Append("\n");
            sb.Append("  Unrealizedpnl: ").Append(Unrealizedpnl).Append("\n");
            sb.Append("  Stockmarketvalue: ").Append(Stockmarketvalue).Append("\n");
            sb.Append("  Moneyfunds: ").Append(Moneyfunds).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Realizedpnl: ").Append(Realizedpnl).Append("\n");
            sb.Append("  Funds: ").Append(Funds).Append("\n");
            sb.Append("  Acctcode: ").Append(Acctcode).Append("\n");
            sb.Append("  Issueroptionsmarketvalue: ").Append(Issueroptionsmarketvalue).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ledger);
        }

        /// <summary>
        /// Returns true if Ledger instances are equal
        /// </summary>
        /// <param name="input">Instance of Ledger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ledger input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Commoditymarketvalue == input.Commoditymarketvalue ||
                    (this.Commoditymarketvalue != null &&
                    this.Commoditymarketvalue.Equals(input.Commoditymarketvalue))
                ) && 
                (
                    this.Futuremarketvalue == input.Futuremarketvalue ||
                    (this.Futuremarketvalue != null &&
                    this.Futuremarketvalue.Equals(input.Futuremarketvalue))
                ) && 
                (
                    this.Settledcash == input.Settledcash ||
                    (this.Settledcash != null &&
                    this.Settledcash.Equals(input.Settledcash))
                ) && 
                (
                    this.Exchangerate == input.Exchangerate ||
                    (this.Exchangerate != null &&
                    this.Exchangerate.Equals(input.Exchangerate))
                ) && 
                (
                    this.Sessionid == input.Sessionid ||
                    (this.Sessionid != null &&
                    this.Sessionid.Equals(input.Sessionid))
                ) && 
                (
                    this.Cashbalance == input.Cashbalance ||
                    (this.Cashbalance != null &&
                    this.Cashbalance.Equals(input.Cashbalance))
                ) && 
                (
                    this.Corporatebondsmarketvalue == input.Corporatebondsmarketvalue ||
                    (this.Corporatebondsmarketvalue != null &&
                    this.Corporatebondsmarketvalue.Equals(input.Corporatebondsmarketvalue))
                ) && 
                (
                    this.Warrantsmarketvalue == input.Warrantsmarketvalue ||
                    (this.Warrantsmarketvalue != null &&
                    this.Warrantsmarketvalue.Equals(input.Warrantsmarketvalue))
                ) && 
                (
                    this.Netliquidationvalue == input.Netliquidationvalue ||
                    (this.Netliquidationvalue != null &&
                    this.Netliquidationvalue.Equals(input.Netliquidationvalue))
                ) && 
                (
                    this.Interest == input.Interest ||
                    (this.Interest != null &&
                    this.Interest.Equals(input.Interest))
                ) && 
                (
                    this.Unrealizedpnl == input.Unrealizedpnl ||
                    (this.Unrealizedpnl != null &&
                    this.Unrealizedpnl.Equals(input.Unrealizedpnl))
                ) && 
                (
                    this.Stockmarketvalue == input.Stockmarketvalue ||
                    (this.Stockmarketvalue != null &&
                    this.Stockmarketvalue.Equals(input.Stockmarketvalue))
                ) && 
                (
                    this.Moneyfunds == input.Moneyfunds ||
                    (this.Moneyfunds != null &&
                    this.Moneyfunds.Equals(input.Moneyfunds))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Realizedpnl == input.Realizedpnl ||
                    (this.Realizedpnl != null &&
                    this.Realizedpnl.Equals(input.Realizedpnl))
                ) && 
                (
                    this.Funds == input.Funds ||
                    (this.Funds != null &&
                    this.Funds.Equals(input.Funds))
                ) && 
                (
                    this.Acctcode == input.Acctcode ||
                    (this.Acctcode != null &&
                    this.Acctcode.Equals(input.Acctcode))
                ) && 
                (
                    this.Issueroptionsmarketvalue == input.Issueroptionsmarketvalue ||
                    (this.Issueroptionsmarketvalue != null &&
                    this.Issueroptionsmarketvalue.Equals(input.Issueroptionsmarketvalue))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Commoditymarketvalue != null)
                    hashCode = hashCode * 59 + this.Commoditymarketvalue.GetHashCode();
                if (this.Futuremarketvalue != null)
                    hashCode = hashCode * 59 + this.Futuremarketvalue.GetHashCode();
                if (this.Settledcash != null)
                    hashCode = hashCode * 59 + this.Settledcash.GetHashCode();
                if (this.Exchangerate != null)
                    hashCode = hashCode * 59 + this.Exchangerate.GetHashCode();
                if (this.Sessionid != null)
                    hashCode = hashCode * 59 + this.Sessionid.GetHashCode();
                if (this.Cashbalance != null)
                    hashCode = hashCode * 59 + this.Cashbalance.GetHashCode();
                if (this.Corporatebondsmarketvalue != null)
                    hashCode = hashCode * 59 + this.Corporatebondsmarketvalue.GetHashCode();
                if (this.Warrantsmarketvalue != null)
                    hashCode = hashCode * 59 + this.Warrantsmarketvalue.GetHashCode();
                if (this.Netliquidationvalue != null)
                    hashCode = hashCode * 59 + this.Netliquidationvalue.GetHashCode();
                if (this.Interest != null)
                    hashCode = hashCode * 59 + this.Interest.GetHashCode();
                if (this.Unrealizedpnl != null)
                    hashCode = hashCode * 59 + this.Unrealizedpnl.GetHashCode();
                if (this.Stockmarketvalue != null)
                    hashCode = hashCode * 59 + this.Stockmarketvalue.GetHashCode();
                if (this.Moneyfunds != null)
                    hashCode = hashCode * 59 + this.Moneyfunds.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Realizedpnl != null)
                    hashCode = hashCode * 59 + this.Realizedpnl.GetHashCode();
                if (this.Funds != null)
                    hashCode = hashCode * 59 + this.Funds.GetHashCode();
                if (this.Acctcode != null)
                    hashCode = hashCode * 59 + this.Acctcode.GetHashCode();
                if (this.Issueroptionsmarketvalue != null)
                    hashCode = hashCode * 59 + this.Issueroptionsmarketvalue.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
