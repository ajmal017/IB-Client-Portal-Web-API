/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StatsData
    /// </summary>
    [DataContract]
    public partial class StatsData :  IEquatable<StatsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatsData" /> class.
        /// </summary>
        /// <param name="conid">conid.</param>
        /// <param name="exchange">exchange.</param>
        /// <param name="v">v.</param>
        /// <param name="t">t.</param>
        /// <param name="tT">tT.</param>
        /// <param name="p">Object, payload depends on event type. See confluence page for IGEvntUpd..</param>
        public StatsData(decimal? conid = default(decimal?), string exchange = default(string), decimal? v = default(decimal?), decimal? t = default(decimal?), decimal? tT = default(decimal?), string p = default(string))
        {
            this.Conid = conid;
            this.Exchange = exchange;
            this.V = v;
            this.T = t;
            this.TT = tT;
            this.P = p;
        }
        
        /// <summary>
        /// Gets or Sets Conid
        /// </summary>
        [DataMember(Name="Conid", EmitDefaultValue=false)]
        public decimal? Conid { get; set; }

        /// <summary>
        /// Gets or Sets Exchange
        /// </summary>
        [DataMember(Name="Exchange", EmitDefaultValue=false)]
        public string Exchange { get; set; }

        /// <summary>
        /// Gets or Sets V
        /// </summary>
        [DataMember(Name="V", EmitDefaultValue=false)]
        public decimal? V { get; set; }

        /// <summary>
        /// Gets or Sets T
        /// </summary>
        [DataMember(Name="T", EmitDefaultValue=false)]
        public decimal? T { get; set; }

        /// <summary>
        /// Gets or Sets TT
        /// </summary>
        [DataMember(Name="TT", EmitDefaultValue=false)]
        public decimal? TT { get; set; }

        /// <summary>
        /// Object, payload depends on event type. See confluence page for IGEvntUpd.
        /// </summary>
        /// <value>Object, payload depends on event type. See confluence page for IGEvntUpd.</value>
        [DataMember(Name="P", EmitDefaultValue=false)]
        public string P { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatsData {\n");
            sb.Append("  Conid: ").Append(Conid).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  V: ").Append(V).Append("\n");
            sb.Append("  T: ").Append(T).Append("\n");
            sb.Append("  TT: ").Append(TT).Append("\n");
            sb.Append("  P: ").Append(P).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatsData);
        }

        /// <summary>
        /// Returns true if StatsData instances are equal
        /// </summary>
        /// <param name="input">Instance of StatsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatsData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Conid == input.Conid ||
                    (this.Conid != null &&
                    this.Conid.Equals(input.Conid))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.V == input.V ||
                    (this.V != null &&
                    this.V.Equals(input.V))
                ) && 
                (
                    this.T == input.T ||
                    (this.T != null &&
                    this.T.Equals(input.T))
                ) && 
                (
                    this.TT == input.TT ||
                    (this.TT != null &&
                    this.TT.Equals(input.TT))
                ) && 
                (
                    this.P == input.P ||
                    (this.P != null &&
                    this.P.Equals(input.P))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Conid != null)
                    hashCode = hashCode * 59 + this.Conid.GetHashCode();
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.V != null)
                    hashCode = hashCode * 59 + this.V.GetHashCode();
                if (this.T != null)
                    hashCode = hashCode * 59 + this.T.GetHashCode();
                if (this.TT != null)
                    hashCode = hashCode * 59 + this.TT.GetHashCode();
                if (this.P != null)
                    hashCode = hashCode * 59 + this.P.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
