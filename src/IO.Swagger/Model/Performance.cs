/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Performance
    /// </summary>
    [DataContract]
    public partial class Performance :  IEquatable<Performance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Performance" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="cps">Cumulative performance data.</param>
        /// <param name="tpps">Time period performance data.</param>
        /// <param name="nav">Net asset value data for the account or consolidated accounts. NAV data is not applicable to benchmarks..</param>
        /// <param name="pm">pm.</param>
        /// <param name="included">included.</param>
        /// <param name="currencyType">currencyType.</param>
        /// <param name="rc">rc.</param>
        public Performance(string id = default(string), Object cps = default(Object), Object tpps = default(Object), Object nav = default(Object), string pm = default(string), List<string> included = default(List<string>), string currencyType = default(string), int? rc = default(int?))
        {
            this.Id = id;
            this.Cps = cps;
            this.Tpps = tpps;
            this.Nav = nav;
            this.Pm = pm;
            this.Included = included;
            this.CurrencyType = currencyType;
            this.Rc = rc;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Cumulative performance data
        /// </summary>
        /// <value>Cumulative performance data</value>
        [DataMember(Name="cps", EmitDefaultValue=false)]
        public Object Cps { get; set; }

        /// <summary>
        /// Time period performance data
        /// </summary>
        /// <value>Time period performance data</value>
        [DataMember(Name="tpps", EmitDefaultValue=false)]
        public Object Tpps { get; set; }

        /// <summary>
        /// Net asset value data for the account or consolidated accounts. NAV data is not applicable to benchmarks.
        /// </summary>
        /// <value>Net asset value data for the account or consolidated accounts. NAV data is not applicable to benchmarks.</value>
        [DataMember(Name="nav", EmitDefaultValue=false)]
        public Object Nav { get; set; }

        /// <summary>
        /// Gets or Sets Pm
        /// </summary>
        [DataMember(Name="pm", EmitDefaultValue=false)]
        public string Pm { get; set; }

        /// <summary>
        /// Gets or Sets Included
        /// </summary>
        [DataMember(Name="included", EmitDefaultValue=false)]
        public List<string> Included { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyType
        /// </summary>
        [DataMember(Name="currencyType", EmitDefaultValue=false)]
        public string CurrencyType { get; set; }

        /// <summary>
        /// Gets or Sets Rc
        /// </summary>
        [DataMember(Name="rc", EmitDefaultValue=false)]
        public int? Rc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Performance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Cps: ").Append(Cps).Append("\n");
            sb.Append("  Tpps: ").Append(Tpps).Append("\n");
            sb.Append("  Nav: ").Append(Nav).Append("\n");
            sb.Append("  Pm: ").Append(Pm).Append("\n");
            sb.Append("  Included: ").Append(Included).Append("\n");
            sb.Append("  CurrencyType: ").Append(CurrencyType).Append("\n");
            sb.Append("  Rc: ").Append(Rc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Performance);
        }

        /// <summary>
        /// Returns true if Performance instances are equal
        /// </summary>
        /// <param name="input">Instance of Performance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Performance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Cps == input.Cps ||
                    (this.Cps != null &&
                    this.Cps.Equals(input.Cps))
                ) && 
                (
                    this.Tpps == input.Tpps ||
                    (this.Tpps != null &&
                    this.Tpps.Equals(input.Tpps))
                ) && 
                (
                    this.Nav == input.Nav ||
                    (this.Nav != null &&
                    this.Nav.Equals(input.Nav))
                ) && 
                (
                    this.Pm == input.Pm ||
                    (this.Pm != null &&
                    this.Pm.Equals(input.Pm))
                ) && 
                (
                    this.Included == input.Included ||
                    this.Included != null &&
                    this.Included.SequenceEqual(input.Included)
                ) && 
                (
                    this.CurrencyType == input.CurrencyType ||
                    (this.CurrencyType != null &&
                    this.CurrencyType.Equals(input.CurrencyType))
                ) && 
                (
                    this.Rc == input.Rc ||
                    (this.Rc != null &&
                    this.Rc.Equals(input.Rc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Cps != null)
                    hashCode = hashCode * 59 + this.Cps.GetHashCode();
                if (this.Tpps != null)
                    hashCode = hashCode * 59 + this.Tpps.GetHashCode();
                if (this.Nav != null)
                    hashCode = hashCode * 59 + this.Nav.GetHashCode();
                if (this.Pm != null)
                    hashCode = hashCode * 59 + this.Pm.GetHashCode();
                if (this.Included != null)
                    hashCode = hashCode * 59 + this.Included.GetHashCode();
                if (this.CurrencyType != null)
                    hashCode = hashCode * 59 + this.CurrencyType.GetHashCode();
                if (this.Rc != null)
                    hashCode = hashCode * 59 + this.Rc.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
