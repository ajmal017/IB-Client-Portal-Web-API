/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// contains all the order related info
    /// </summary>
    [DataContract]
    public partial class Order :  IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="acct">account id.</param>
        /// <param name="conid">conid.</param>
        /// <param name="orderDesc">orderDesc.</param>
        /// <param name="description1">description1.</param>
        /// <param name="ticker">for exmple FB.</param>
        /// <param name="secType">for example STK.</param>
        /// <param name="listingExchange">for example NASDAQ.NMS.</param>
        /// <param name="remainingQuantity">remainingQuantity.</param>
        /// <param name="filledQuantity">filledQuantity.</param>
        /// <param name="companyName">companyName.</param>
        /// <param name="status">PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.                  Occurs most commonly if an exchange is closed. PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.                 The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified.  Submitted - Indicates that the order has been accepted at the order destination and is working. Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.              This could occur unexpectedly when IB or the destination has rejected the order.   Filled - Indicates that the order has been completely filled.  Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,            or if the order was to short a security and shares have not yet been located.  .</param>
        /// <param name="origOrderType">for example Limit.</param>
        /// <param name="side">BUY or SELL.</param>
        /// <param name="price">price.</param>
        /// <param name="bgColor">back-ground color.</param>
        /// <param name="fgColor">fgColor.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="parentId">Only exists in child order of bracket.</param>
        /// <param name="orderRef">User defined string used to identify the order. Value is set using \&quot;cOID\&quot; field while placing an order..</param>
        public Order(string acct = default(string), int? conid = default(int?), string orderDesc = default(string), string description1 = default(string), string ticker = default(string), string secType = default(string), string listingExchange = default(string), string remainingQuantity = default(string), string filledQuantity = default(string), string companyName = default(string), string status = default(string), string origOrderType = default(string), string side = default(string), decimal? price = default(decimal?), string bgColor = default(string), string fgColor = default(string), int? orderId = default(int?), int? parentId = default(int?), string orderRef = default(string))
        {
            this.Acct = acct;
            this.Conid = conid;
            this.OrderDesc = orderDesc;
            this.Description1 = description1;
            this.Ticker = ticker;
            this.SecType = secType;
            this.ListingExchange = listingExchange;
            this.RemainingQuantity = remainingQuantity;
            this.FilledQuantity = filledQuantity;
            this.CompanyName = companyName;
            this.Status = status;
            this.OrigOrderType = origOrderType;
            this.Side = side;
            this.Price = price;
            this.BgColor = bgColor;
            this.FgColor = fgColor;
            this.OrderId = orderId;
            this.ParentId = parentId;
            this.OrderRef = orderRef;
        }
        
        /// <summary>
        /// account id
        /// </summary>
        /// <value>account id</value>
        [DataMember(Name="acct", EmitDefaultValue=false)]
        public string Acct { get; set; }

        /// <summary>
        /// Gets or Sets Conid
        /// </summary>
        [DataMember(Name="conid", EmitDefaultValue=false)]
        public int? Conid { get; set; }

        /// <summary>
        /// Gets or Sets OrderDesc
        /// </summary>
        [DataMember(Name="orderDesc", EmitDefaultValue=false)]
        public string OrderDesc { get; set; }

        /// <summary>
        /// Gets or Sets Description1
        /// </summary>
        [DataMember(Name="description1", EmitDefaultValue=false)]
        public string Description1 { get; set; }

        /// <summary>
        /// for exmple FB
        /// </summary>
        /// <value>for exmple FB</value>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }

        /// <summary>
        /// for example STK
        /// </summary>
        /// <value>for example STK</value>
        [DataMember(Name="secType", EmitDefaultValue=false)]
        public string SecType { get; set; }

        /// <summary>
        /// for example NASDAQ.NMS
        /// </summary>
        /// <value>for example NASDAQ.NMS</value>
        [DataMember(Name="listingExchange", EmitDefaultValue=false)]
        public string ListingExchange { get; set; }

        /// <summary>
        /// Gets or Sets RemainingQuantity
        /// </summary>
        [DataMember(Name="remainingQuantity", EmitDefaultValue=false)]
        public string RemainingQuantity { get; set; }

        /// <summary>
        /// Gets or Sets FilledQuantity
        /// </summary>
        [DataMember(Name="filledQuantity", EmitDefaultValue=false)]
        public string FilledQuantity { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name="companyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.                  Occurs most commonly if an exchange is closed. PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.                 The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified.  Submitted - Indicates that the order has been accepted at the order destination and is working. Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.              This could occur unexpectedly when IB or the destination has rejected the order.   Filled - Indicates that the order has been completely filled.  Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,            or if the order was to short a security and shares have not yet been located.  
        /// </summary>
        /// <value>PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.                  Occurs most commonly if an exchange is closed. PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.                 The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified.  Submitted - Indicates that the order has been accepted at the order destination and is working. Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.              This could occur unexpectedly when IB or the destination has rejected the order.   Filled - Indicates that the order has been completely filled.  Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,            or if the order was to short a security and shares have not yet been located.  </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// for example Limit
        /// </summary>
        /// <value>for example Limit</value>
        [DataMember(Name="origOrderType", EmitDefaultValue=false)]
        public string OrigOrderType { get; set; }

        /// <summary>
        /// BUY or SELL
        /// </summary>
        /// <value>BUY or SELL</value>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public decimal? Price { get; set; }

        /// <summary>
        /// back-ground color
        /// </summary>
        /// <value>back-ground color</value>
        [DataMember(Name="bgColor", EmitDefaultValue=false)]
        public string BgColor { get; set; }

        /// <summary>
        /// Gets or Sets FgColor
        /// </summary>
        [DataMember(Name="fgColor", EmitDefaultValue=false)]
        public string FgColor { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }

        /// <summary>
        /// Only exists in child order of bracket
        /// </summary>
        /// <value>Only exists in child order of bracket</value>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public int? ParentId { get; set; }

        /// <summary>
        /// User defined string used to identify the order. Value is set using \&quot;cOID\&quot; field while placing an order.
        /// </summary>
        /// <value>User defined string used to identify the order. Value is set using \&quot;cOID\&quot; field while placing an order.</value>
        [DataMember(Name="order_ref", EmitDefaultValue=false)]
        public string OrderRef { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Acct: ").Append(Acct).Append("\n");
            sb.Append("  Conid: ").Append(Conid).Append("\n");
            sb.Append("  OrderDesc: ").Append(OrderDesc).Append("\n");
            sb.Append("  Description1: ").Append(Description1).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  SecType: ").Append(SecType).Append("\n");
            sb.Append("  ListingExchange: ").Append(ListingExchange).Append("\n");
            sb.Append("  RemainingQuantity: ").Append(RemainingQuantity).Append("\n");
            sb.Append("  FilledQuantity: ").Append(FilledQuantity).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  OrigOrderType: ").Append(OrigOrderType).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  BgColor: ").Append(BgColor).Append("\n");
            sb.Append("  FgColor: ").Append(FgColor).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  OrderRef: ").Append(OrderRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Acct == input.Acct ||
                    (this.Acct != null &&
                    this.Acct.Equals(input.Acct))
                ) && 
                (
                    this.Conid == input.Conid ||
                    (this.Conid != null &&
                    this.Conid.Equals(input.Conid))
                ) && 
                (
                    this.OrderDesc == input.OrderDesc ||
                    (this.OrderDesc != null &&
                    this.OrderDesc.Equals(input.OrderDesc))
                ) && 
                (
                    this.Description1 == input.Description1 ||
                    (this.Description1 != null &&
                    this.Description1.Equals(input.Description1))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.SecType == input.SecType ||
                    (this.SecType != null &&
                    this.SecType.Equals(input.SecType))
                ) && 
                (
                    this.ListingExchange == input.ListingExchange ||
                    (this.ListingExchange != null &&
                    this.ListingExchange.Equals(input.ListingExchange))
                ) && 
                (
                    this.RemainingQuantity == input.RemainingQuantity ||
                    (this.RemainingQuantity != null &&
                    this.RemainingQuantity.Equals(input.RemainingQuantity))
                ) && 
                (
                    this.FilledQuantity == input.FilledQuantity ||
                    (this.FilledQuantity != null &&
                    this.FilledQuantity.Equals(input.FilledQuantity))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.OrigOrderType == input.OrigOrderType ||
                    (this.OrigOrderType != null &&
                    this.OrigOrderType.Equals(input.OrigOrderType))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.BgColor == input.BgColor ||
                    (this.BgColor != null &&
                    this.BgColor.Equals(input.BgColor))
                ) && 
                (
                    this.FgColor == input.FgColor ||
                    (this.FgColor != null &&
                    this.FgColor.Equals(input.FgColor))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.OrderRef == input.OrderRef ||
                    (this.OrderRef != null &&
                    this.OrderRef.Equals(input.OrderRef))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Acct != null)
                    hashCode = hashCode * 59 + this.Acct.GetHashCode();
                if (this.Conid != null)
                    hashCode = hashCode * 59 + this.Conid.GetHashCode();
                if (this.OrderDesc != null)
                    hashCode = hashCode * 59 + this.OrderDesc.GetHashCode();
                if (this.Description1 != null)
                    hashCode = hashCode * 59 + this.Description1.GetHashCode();
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.SecType != null)
                    hashCode = hashCode * 59 + this.SecType.GetHashCode();
                if (this.ListingExchange != null)
                    hashCode = hashCode * 59 + this.ListingExchange.GetHashCode();
                if (this.RemainingQuantity != null)
                    hashCode = hashCode * 59 + this.RemainingQuantity.GetHashCode();
                if (this.FilledQuantity != null)
                    hashCode = hashCode * 59 + this.FilledQuantity.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.OrigOrderType != null)
                    hashCode = hashCode * 59 + this.OrigOrderType.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.BgColor != null)
                    hashCode = hashCode * 59 + this.BgColor.GetHashCode();
                if (this.FgColor != null)
                    hashCode = hashCode * 59 + this.FgColor.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.OrderRef != null)
                    hashCode = hashCode * 59 + this.OrderRef.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
