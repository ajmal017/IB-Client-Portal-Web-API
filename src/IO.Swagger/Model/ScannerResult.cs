/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ScannerResult
    /// </summary>
    [DataContract]
    public partial class ScannerResult :  IEquatable<ScannerResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScannerResult" /> class.
        /// </summary>
        /// <param name="total">total.</param>
        /// <param name="size">size.</param>
        /// <param name="offset">offset.</param>
        /// <param name="scanTime">scanTime.</param>
        /// <param name="id">id.</param>
        /// <param name="position">position.</param>
        /// <param name="contracts">Contains list of contracts matching the scanner query.</param>
        public ScannerResult(int? total = default(int?), int? size = default(int?), int? offset = default(int?), string scanTime = default(string), decimal? id = default(decimal?), string position = default(string), Object contracts = default(Object))
        {
            this.Total = total;
            this.Size = size;
            this.Offset = offset;
            this.ScanTime = scanTime;
            this.Id = id;
            this.Position = position;
            this.Contracts = contracts;
        }
        
        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public int? Total { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public int? Offset { get; set; }

        /// <summary>
        /// Gets or Sets ScanTime
        /// </summary>
        [DataMember(Name="scanTime", EmitDefaultValue=false)]
        public string ScanTime { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public decimal? Id { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public string Position { get; set; }

        /// <summary>
        /// Contains list of contracts matching the scanner query
        /// </summary>
        /// <value>Contains list of contracts matching the scanner query</value>
        [DataMember(Name="Contracts", EmitDefaultValue=false)]
        public Object Contracts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScannerResult {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  ScanTime: ").Append(ScanTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Contracts: ").Append(Contracts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScannerResult);
        }

        /// <summary>
        /// Returns true if ScannerResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ScannerResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScannerResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Offset == input.Offset ||
                    (this.Offset != null &&
                    this.Offset.Equals(input.Offset))
                ) && 
                (
                    this.ScanTime == input.ScanTime ||
                    (this.ScanTime != null &&
                    this.ScanTime.Equals(input.ScanTime))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Contracts == input.Contracts ||
                    (this.Contracts != null &&
                    this.Contracts.Equals(input.Contracts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Offset != null)
                    hashCode = hashCode * 59 + this.Offset.GetHashCode();
                if (this.ScanTime != null)
                    hashCode = hashCode * 59 + this.ScanTime.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Contracts != null)
                    hashCode = hashCode * 59 + this.Contracts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
