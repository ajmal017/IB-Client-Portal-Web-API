/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Trade
    /// </summary>
    [DataContract]
    public partial class Trade :  IEquatable<Trade>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Trade" /> class.
        /// </summary>
        /// <param name="executionId">executionId.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="side">side.</param>
        /// <param name="orderDescription">orderDescription.</param>
        /// <param name="tradeTime">tradeTime.</param>
        /// <param name="tradeTimeR">tradeTimeR.</param>
        /// <param name="size">size.</param>
        /// <param name="price">price.</param>
        /// <param name="submitter">submitter.</param>
        /// <param name="exchange">exchange.</param>
        /// <param name="comission">comission.</param>
        /// <param name="netAmount">netAmount.</param>
        /// <param name="account">account.</param>
        /// <param name="companyName">companyName.</param>
        /// <param name="contractDescription1">contractDescription1.</param>
        /// <param name="secType">secType.</param>
        /// <param name="conidex">conidex.</param>
        /// <param name="position">position.</param>
        /// <param name="clearingId">clearingId.</param>
        /// <param name="clearingName">clearingName.</param>
        /// <param name="orderRef">User defined string used to identify the order. Value is set using \&quot;cOID\&quot; field while placing an order..</param>
        public Trade(string executionId = default(string), string symbol = default(string), string side = default(string), string orderDescription = default(string), string tradeTime = default(string), decimal? tradeTimeR = default(decimal?), string size = default(string), string price = default(string), string submitter = default(string), string exchange = default(string), decimal? comission = default(decimal?), decimal? netAmount = default(decimal?), string account = default(string), string companyName = default(string), string contractDescription1 = default(string), string secType = default(string), string conidex = default(string), string position = default(string), string clearingId = default(string), string clearingName = default(string), string orderRef = default(string))
        {
            this.ExecutionId = executionId;
            this.Symbol = symbol;
            this.Side = side;
            this.OrderDescription = orderDescription;
            this.TradeTime = tradeTime;
            this.TradeTimeR = tradeTimeR;
            this.Size = size;
            this.Price = price;
            this.Submitter = submitter;
            this.Exchange = exchange;
            this.Comission = comission;
            this.NetAmount = netAmount;
            this.Account = account;
            this.CompanyName = companyName;
            this.ContractDescription1 = contractDescription1;
            this.SecType = secType;
            this.Conidex = conidex;
            this.Position = position;
            this.ClearingId = clearingId;
            this.ClearingName = clearingName;
            this.OrderRef = orderRef;
        }
        
        /// <summary>
        /// Gets or Sets ExecutionId
        /// </summary>
        [DataMember(Name="execution_id", EmitDefaultValue=false)]
        public string ExecutionId { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets OrderDescription
        /// </summary>
        [DataMember(Name="order_description", EmitDefaultValue=false)]
        public string OrderDescription { get; set; }

        /// <summary>
        /// Gets or Sets TradeTime
        /// </summary>
        [DataMember(Name="trade_time", EmitDefaultValue=false)]
        public string TradeTime { get; set; }

        /// <summary>
        /// Gets or Sets TradeTimeR
        /// </summary>
        [DataMember(Name="trade_time_r", EmitDefaultValue=false)]
        public decimal? TradeTimeR { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public string Size { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public string Price { get; set; }

        /// <summary>
        /// Gets or Sets Submitter
        /// </summary>
        [DataMember(Name="submitter", EmitDefaultValue=false)]
        public string Submitter { get; set; }

        /// <summary>
        /// Gets or Sets Exchange
        /// </summary>
        [DataMember(Name="exchange", EmitDefaultValue=false)]
        public string Exchange { get; set; }

        /// <summary>
        /// Gets or Sets Comission
        /// </summary>
        [DataMember(Name="comission", EmitDefaultValue=false)]
        public decimal? Comission { get; set; }

        /// <summary>
        /// Gets or Sets NetAmount
        /// </summary>
        [DataMember(Name="net_amount", EmitDefaultValue=false)]
        public decimal? NetAmount { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name="company_name", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets ContractDescription1
        /// </summary>
        [DataMember(Name="contract_description_1", EmitDefaultValue=false)]
        public string ContractDescription1 { get; set; }

        /// <summary>
        /// Gets or Sets SecType
        /// </summary>
        [DataMember(Name="sec_type", EmitDefaultValue=false)]
        public string SecType { get; set; }

        /// <summary>
        /// Gets or Sets Conidex
        /// </summary>
        [DataMember(Name="conidex", EmitDefaultValue=false)]
        public string Conidex { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets ClearingId
        /// </summary>
        [DataMember(Name="clearing_id", EmitDefaultValue=false)]
        public string ClearingId { get; set; }

        /// <summary>
        /// Gets or Sets ClearingName
        /// </summary>
        [DataMember(Name="clearing_name", EmitDefaultValue=false)]
        public string ClearingName { get; set; }

        /// <summary>
        /// User defined string used to identify the order. Value is set using \&quot;cOID\&quot; field while placing an order.
        /// </summary>
        /// <value>User defined string used to identify the order. Value is set using \&quot;cOID\&quot; field while placing an order.</value>
        [DataMember(Name="order_ref", EmitDefaultValue=false)]
        public string OrderRef { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Trade {\n");
            sb.Append("  ExecutionId: ").Append(ExecutionId).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  OrderDescription: ").Append(OrderDescription).Append("\n");
            sb.Append("  TradeTime: ").Append(TradeTime).Append("\n");
            sb.Append("  TradeTimeR: ").Append(TradeTimeR).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Submitter: ").Append(Submitter).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  Comission: ").Append(Comission).Append("\n");
            sb.Append("  NetAmount: ").Append(NetAmount).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  ContractDescription1: ").Append(ContractDescription1).Append("\n");
            sb.Append("  SecType: ").Append(SecType).Append("\n");
            sb.Append("  Conidex: ").Append(Conidex).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  ClearingId: ").Append(ClearingId).Append("\n");
            sb.Append("  ClearingName: ").Append(ClearingName).Append("\n");
            sb.Append("  OrderRef: ").Append(OrderRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Trade);
        }

        /// <summary>
        /// Returns true if Trade instances are equal
        /// </summary>
        /// <param name="input">Instance of Trade to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Trade input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExecutionId == input.ExecutionId ||
                    (this.ExecutionId != null &&
                    this.ExecutionId.Equals(input.ExecutionId))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.OrderDescription == input.OrderDescription ||
                    (this.OrderDescription != null &&
                    this.OrderDescription.Equals(input.OrderDescription))
                ) && 
                (
                    this.TradeTime == input.TradeTime ||
                    (this.TradeTime != null &&
                    this.TradeTime.Equals(input.TradeTime))
                ) && 
                (
                    this.TradeTimeR == input.TradeTimeR ||
                    (this.TradeTimeR != null &&
                    this.TradeTimeR.Equals(input.TradeTimeR))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Submitter == input.Submitter ||
                    (this.Submitter != null &&
                    this.Submitter.Equals(input.Submitter))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.Comission == input.Comission ||
                    (this.Comission != null &&
                    this.Comission.Equals(input.Comission))
                ) && 
                (
                    this.NetAmount == input.NetAmount ||
                    (this.NetAmount != null &&
                    this.NetAmount.Equals(input.NetAmount))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.ContractDescription1 == input.ContractDescription1 ||
                    (this.ContractDescription1 != null &&
                    this.ContractDescription1.Equals(input.ContractDescription1))
                ) && 
                (
                    this.SecType == input.SecType ||
                    (this.SecType != null &&
                    this.SecType.Equals(input.SecType))
                ) && 
                (
                    this.Conidex == input.Conidex ||
                    (this.Conidex != null &&
                    this.Conidex.Equals(input.Conidex))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.ClearingId == input.ClearingId ||
                    (this.ClearingId != null &&
                    this.ClearingId.Equals(input.ClearingId))
                ) && 
                (
                    this.ClearingName == input.ClearingName ||
                    (this.ClearingName != null &&
                    this.ClearingName.Equals(input.ClearingName))
                ) && 
                (
                    this.OrderRef == input.OrderRef ||
                    (this.OrderRef != null &&
                    this.OrderRef.Equals(input.OrderRef))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExecutionId != null)
                    hashCode = hashCode * 59 + this.ExecutionId.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.OrderDescription != null)
                    hashCode = hashCode * 59 + this.OrderDescription.GetHashCode();
                if (this.TradeTime != null)
                    hashCode = hashCode * 59 + this.TradeTime.GetHashCode();
                if (this.TradeTimeR != null)
                    hashCode = hashCode * 59 + this.TradeTimeR.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Submitter != null)
                    hashCode = hashCode * 59 + this.Submitter.GetHashCode();
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.Comission != null)
                    hashCode = hashCode * 59 + this.Comission.GetHashCode();
                if (this.NetAmount != null)
                    hashCode = hashCode * 59 + this.NetAmount.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.ContractDescription1 != null)
                    hashCode = hashCode * 59 + this.ContractDescription1.GetHashCode();
                if (this.SecType != null)
                    hashCode = hashCode * 59 + this.SecType.GetHashCode();
                if (this.Conidex != null)
                    hashCode = hashCode * 59 + this.Conidex.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.ClearingId != null)
                    hashCode = hashCode * 59 + this.ClearingId.GetHashCode();
                if (this.ClearingName != null)
                    hashCode = hashCode * 59 + this.ClearingName.GetHashCode();
                if (this.OrderRef != null)
                    hashCode = hashCode * 59 + this.OrderRef.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
