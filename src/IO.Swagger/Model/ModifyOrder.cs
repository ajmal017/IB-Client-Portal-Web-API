/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ModifyOrder
    /// </summary>
    [DataContract]
    public partial class ModifyOrder :  IEquatable<ModifyOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyOrder" /> class.
        /// </summary>
        /// <param name="acctId">acctId.</param>
        /// <param name="conid">conid.</param>
        /// <param name="orderType">for example LMT.</param>
        /// <param name="outsideRTH">outsideRTH.</param>
        /// <param name="price">price.</param>
        /// <param name="auxPrice">auxPrice.</param>
        /// <param name="side">SELL or BUY.</param>
        /// <param name="listingExchange">optional, not required.</param>
        /// <param name="ticker">ticker.</param>
        /// <param name="tif">for example DAY.</param>
        /// <param name="quantity">usually integer, for some special cases can be float numbers.</param>
        public ModifyOrder(string acctId = default(string), int? conid = default(int?), string orderType = default(string), bool? outsideRTH = default(bool?), decimal? price = default(decimal?), decimal? auxPrice = default(decimal?), string side = default(string), string listingExchange = default(string), string ticker = default(string), string tif = default(string), decimal? quantity = default(decimal?))
        {
            this.AcctId = acctId;
            this.Conid = conid;
            this.OrderType = orderType;
            this.OutsideRTH = outsideRTH;
            this.Price = price;
            this.AuxPrice = auxPrice;
            this.Side = side;
            this.ListingExchange = listingExchange;
            this.Ticker = ticker;
            this.Tif = tif;
            this.Quantity = quantity;
        }
        
        /// <summary>
        /// Gets or Sets AcctId
        /// </summary>
        [DataMember(Name="acctId", EmitDefaultValue=false)]
        public string AcctId { get; set; }

        /// <summary>
        /// Gets or Sets Conid
        /// </summary>
        [DataMember(Name="conid", EmitDefaultValue=false)]
        public int? Conid { get; set; }

        /// <summary>
        /// for example LMT
        /// </summary>
        /// <value>for example LMT</value>
        [DataMember(Name="orderType", EmitDefaultValue=false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Gets or Sets OutsideRTH
        /// </summary>
        [DataMember(Name="outsideRTH", EmitDefaultValue=false)]
        public bool? OutsideRTH { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public decimal? Price { get; set; }

        /// <summary>
        /// Gets or Sets AuxPrice
        /// </summary>
        [DataMember(Name="auxPrice", EmitDefaultValue=false)]
        public decimal? AuxPrice { get; set; }

        /// <summary>
        /// SELL or BUY
        /// </summary>
        /// <value>SELL or BUY</value>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public string Side { get; set; }

        /// <summary>
        /// optional, not required
        /// </summary>
        /// <value>optional, not required</value>
        [DataMember(Name="listingExchange", EmitDefaultValue=false)]
        public string ListingExchange { get; set; }

        /// <summary>
        /// Gets or Sets Ticker
        /// </summary>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }

        /// <summary>
        /// for example DAY
        /// </summary>
        /// <value>for example DAY</value>
        [DataMember(Name="tif", EmitDefaultValue=false)]
        public string Tif { get; set; }

        /// <summary>
        /// usually integer, for some special cases can be float numbers
        /// </summary>
        /// <value>usually integer, for some special cases can be float numbers</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModifyOrder {\n");
            sb.Append("  AcctId: ").Append(AcctId).Append("\n");
            sb.Append("  Conid: ").Append(Conid).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  OutsideRTH: ").Append(OutsideRTH).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  AuxPrice: ").Append(AuxPrice).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  ListingExchange: ").Append(ListingExchange).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  Tif: ").Append(Tif).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModifyOrder);
        }

        /// <summary>
        /// Returns true if ModifyOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of ModifyOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModifyOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcctId == input.AcctId ||
                    (this.AcctId != null &&
                    this.AcctId.Equals(input.AcctId))
                ) && 
                (
                    this.Conid == input.Conid ||
                    (this.Conid != null &&
                    this.Conid.Equals(input.Conid))
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && 
                (
                    this.OutsideRTH == input.OutsideRTH ||
                    (this.OutsideRTH != null &&
                    this.OutsideRTH.Equals(input.OutsideRTH))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.AuxPrice == input.AuxPrice ||
                    (this.AuxPrice != null &&
                    this.AuxPrice.Equals(input.AuxPrice))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.ListingExchange == input.ListingExchange ||
                    (this.ListingExchange != null &&
                    this.ListingExchange.Equals(input.ListingExchange))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.Tif == input.Tif ||
                    (this.Tif != null &&
                    this.Tif.Equals(input.Tif))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcctId != null)
                    hashCode = hashCode * 59 + this.AcctId.GetHashCode();
                if (this.Conid != null)
                    hashCode = hashCode * 59 + this.Conid.GetHashCode();
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.OutsideRTH != null)
                    hashCode = hashCode * 59 + this.OutsideRTH.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.AuxPrice != null)
                    hashCode = hashCode * 59 + this.AuxPrice.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.ListingExchange != null)
                    hashCode = hashCode * 59 + this.ListingExchange.GetHashCode();
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.Tif != null)
                    hashCode = hashCode * 59 + this.Tif.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
