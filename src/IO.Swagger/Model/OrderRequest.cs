/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OrderRequest
    /// </summary>
    [DataContract]
    public partial class OrderRequest :  IEquatable<OrderRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderRequest" /> class.
        /// </summary>
        /// <param name="acctId">acctId is optional. It should be one of the accounts returned by /iserver/accounts. If not passed, the first one in the list is selected. .</param>
        /// <param name="conid">conid is the identifier of the security you want to trade, you can find the conid with /iserver/secdef/search. .</param>
        /// <param name="secType">conid:type for example 265598:STK.</param>
        /// <param name="cOID">Customer Order ID. An arbitraty string that can be used to identify the order, e.g \&quot;my-fb-order\&quot;. The value must be unique for a 24h span. Please do not set this value for child orders when placing a bracket order. .</param>
        /// <param name="parentId">When placing bracket orders, the child parentId must be equal to the cOId (customer order id) of the parent. .</param>
        /// <param name="orderType">orderType can be one of MKT (Market), LMT (Limit), STP (Stop) or STP_LIMIT (stop limit) .</param>
        /// <param name="listingExchange">listingExchange is optional. By default we use \&quot;SMART\&quot; routing. Possible values are available via this end point: /v1/portal/iserver/contract/{{conid}}/info, see valid_exchange: e.g: SMART,AMEX,NYSE, CBOE,ISE,CHX,ARCA,ISLAND,DRCTEDGE,BEX,BATS,EDGEA,CSFBALGO,JE FFALGO,BYX,IEX,FOXRIVER,TPLUS1,NYSENAT,PSX .</param>
        /// <param name="outsideRTH">set to true if the order can be executed outside regular trading hours. .</param>
        /// <param name="price">optional if order is MKT, for LMT, this is the limit price. For STP this is the stop price. .</param>
        /// <param name="side">SELL or BUY.</param>
        /// <param name="ticker">ticker.</param>
        /// <param name="tif">GTC (Good Till Cancel) or DAY. DAY orders are automatically cancelled at the end of the Day or Trading hours. .</param>
        /// <param name="referrer">for example QuickTrade.</param>
        /// <param name="quantity">usually integer, for some special cases can be float numbers.</param>
        /// <param name="fxQty">double number, this is the cash quantity field which can only be used for FX conversion order. .</param>
        /// <param name="useAdaptive">If true, the system will use the Adaptive Algo to submit the order https://www.interactivebrokers.com/en/index.php?f&#x3D;19091 .</param>
        /// <param name="isCurrencyConversion">set to true if the order is a FX conversion order .</param>
        /// <param name="allocationMethod">Set the allocation method when placing an order using an FA account for a group Possible allocation methods are \&quot;NetLiquidity\&quot;, \&quot;AvailableEquity\&quot;, \&quot;EqualQuantity\&quot; and \&quot;PctChange\&quot;. .</param>
        public OrderRequest(string acctId = default(string), int? conid = default(int?), string secType = default(string), string cOID = default(string), string parentId = default(string), string orderType = default(string), string listingExchange = default(string), bool? outsideRTH = default(bool?), decimal? price = default(decimal?), string side = default(string), string ticker = default(string), string tif = default(string), string referrer = default(string), decimal? quantity = default(decimal?), decimal? fxQty = default(decimal?), bool? useAdaptive = default(bool?), bool? isCurrencyConversion = default(bool?), string allocationMethod = default(string))
        {
            this.AcctId = acctId;
            this.Conid = conid;
            this.SecType = secType;
            this.COID = cOID;
            this.ParentId = parentId;
            this.OrderType = orderType;
            this.ListingExchange = listingExchange;
            this.OutsideRTH = outsideRTH;
            this.Price = price;
            this.Side = side;
            this.Ticker = ticker;
            this.Tif = tif;
            this.Referrer = referrer;
            this.Quantity = quantity;
            this.FxQty = fxQty;
            this.UseAdaptive = useAdaptive;
            this.IsCurrencyConversion = isCurrencyConversion;
            this.AllocationMethod = allocationMethod;
        }
        
        /// <summary>
        /// acctId is optional. It should be one of the accounts returned by /iserver/accounts. If not passed, the first one in the list is selected. 
        /// </summary>
        /// <value>acctId is optional. It should be one of the accounts returned by /iserver/accounts. If not passed, the first one in the list is selected. </value>
        [DataMember(Name="acctId", EmitDefaultValue=false)]
        public string AcctId { get; set; }

        /// <summary>
        /// conid is the identifier of the security you want to trade, you can find the conid with /iserver/secdef/search. 
        /// </summary>
        /// <value>conid is the identifier of the security you want to trade, you can find the conid with /iserver/secdef/search. </value>
        [DataMember(Name="conid", EmitDefaultValue=false)]
        public int? Conid { get; set; }

        /// <summary>
        /// conid:type for example 265598:STK
        /// </summary>
        /// <value>conid:type for example 265598:STK</value>
        [DataMember(Name="secType", EmitDefaultValue=false)]
        public string SecType { get; set; }

        /// <summary>
        /// Customer Order ID. An arbitraty string that can be used to identify the order, e.g \&quot;my-fb-order\&quot;. The value must be unique for a 24h span. Please do not set this value for child orders when placing a bracket order. 
        /// </summary>
        /// <value>Customer Order ID. An arbitraty string that can be used to identify the order, e.g \&quot;my-fb-order\&quot;. The value must be unique for a 24h span. Please do not set this value for child orders when placing a bracket order. </value>
        [DataMember(Name="cOID", EmitDefaultValue=false)]
        public string COID { get; set; }

        /// <summary>
        /// When placing bracket orders, the child parentId must be equal to the cOId (customer order id) of the parent. 
        /// </summary>
        /// <value>When placing bracket orders, the child parentId must be equal to the cOId (customer order id) of the parent. </value>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public string ParentId { get; set; }

        /// <summary>
        /// orderType can be one of MKT (Market), LMT (Limit), STP (Stop) or STP_LIMIT (stop limit) 
        /// </summary>
        /// <value>orderType can be one of MKT (Market), LMT (Limit), STP (Stop) or STP_LIMIT (stop limit) </value>
        [DataMember(Name="orderType", EmitDefaultValue=false)]
        public string OrderType { get; set; }

        /// <summary>
        /// listingExchange is optional. By default we use \&quot;SMART\&quot; routing. Possible values are available via this end point: /v1/portal/iserver/contract/{{conid}}/info, see valid_exchange: e.g: SMART,AMEX,NYSE, CBOE,ISE,CHX,ARCA,ISLAND,DRCTEDGE,BEX,BATS,EDGEA,CSFBALGO,JE FFALGO,BYX,IEX,FOXRIVER,TPLUS1,NYSENAT,PSX 
        /// </summary>
        /// <value>listingExchange is optional. By default we use \&quot;SMART\&quot; routing. Possible values are available via this end point: /v1/portal/iserver/contract/{{conid}}/info, see valid_exchange: e.g: SMART,AMEX,NYSE, CBOE,ISE,CHX,ARCA,ISLAND,DRCTEDGE,BEX,BATS,EDGEA,CSFBALGO,JE FFALGO,BYX,IEX,FOXRIVER,TPLUS1,NYSENAT,PSX </value>
        [DataMember(Name="listingExchange", EmitDefaultValue=false)]
        public string ListingExchange { get; set; }

        /// <summary>
        /// set to true if the order can be executed outside regular trading hours. 
        /// </summary>
        /// <value>set to true if the order can be executed outside regular trading hours. </value>
        [DataMember(Name="outsideRTH", EmitDefaultValue=false)]
        public bool? OutsideRTH { get; set; }

        /// <summary>
        /// optional if order is MKT, for LMT, this is the limit price. For STP this is the stop price. 
        /// </summary>
        /// <value>optional if order is MKT, for LMT, this is the limit price. For STP this is the stop price. </value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public decimal? Price { get; set; }

        /// <summary>
        /// SELL or BUY
        /// </summary>
        /// <value>SELL or BUY</value>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets Ticker
        /// </summary>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }

        /// <summary>
        /// GTC (Good Till Cancel) or DAY. DAY orders are automatically cancelled at the end of the Day or Trading hours. 
        /// </summary>
        /// <value>GTC (Good Till Cancel) or DAY. DAY orders are automatically cancelled at the end of the Day or Trading hours. </value>
        [DataMember(Name="tif", EmitDefaultValue=false)]
        public string Tif { get; set; }

        /// <summary>
        /// for example QuickTrade
        /// </summary>
        /// <value>for example QuickTrade</value>
        [DataMember(Name="referrer", EmitDefaultValue=false)]
        public string Referrer { get; set; }

        /// <summary>
        /// usually integer, for some special cases can be float numbers
        /// </summary>
        /// <value>usually integer, for some special cases can be float numbers</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// double number, this is the cash quantity field which can only be used for FX conversion order. 
        /// </summary>
        /// <value>double number, this is the cash quantity field which can only be used for FX conversion order. </value>
        [DataMember(Name="fxQty", EmitDefaultValue=false)]
        public decimal? FxQty { get; set; }

        /// <summary>
        /// If true, the system will use the Adaptive Algo to submit the order https://www.interactivebrokers.com/en/index.php?f&#x3D;19091 
        /// </summary>
        /// <value>If true, the system will use the Adaptive Algo to submit the order https://www.interactivebrokers.com/en/index.php?f&#x3D;19091 </value>
        [DataMember(Name="useAdaptive", EmitDefaultValue=false)]
        public bool? UseAdaptive { get; set; }

        /// <summary>
        /// set to true if the order is a FX conversion order 
        /// </summary>
        /// <value>set to true if the order is a FX conversion order </value>
        [DataMember(Name="isCurrencyConversion", EmitDefaultValue=false)]
        public bool? IsCurrencyConversion { get; set; }

        /// <summary>
        /// Set the allocation method when placing an order using an FA account for a group Possible allocation methods are \&quot;NetLiquidity\&quot;, \&quot;AvailableEquity\&quot;, \&quot;EqualQuantity\&quot; and \&quot;PctChange\&quot;. 
        /// </summary>
        /// <value>Set the allocation method when placing an order using an FA account for a group Possible allocation methods are \&quot;NetLiquidity\&quot;, \&quot;AvailableEquity\&quot;, \&quot;EqualQuantity\&quot; and \&quot;PctChange\&quot;. </value>
        [DataMember(Name="allocationMethod", EmitDefaultValue=false)]
        public string AllocationMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderRequest {\n");
            sb.Append("  AcctId: ").Append(AcctId).Append("\n");
            sb.Append("  Conid: ").Append(Conid).Append("\n");
            sb.Append("  SecType: ").Append(SecType).Append("\n");
            sb.Append("  COID: ").Append(COID).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  ListingExchange: ").Append(ListingExchange).Append("\n");
            sb.Append("  OutsideRTH: ").Append(OutsideRTH).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  Tif: ").Append(Tif).Append("\n");
            sb.Append("  Referrer: ").Append(Referrer).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  FxQty: ").Append(FxQty).Append("\n");
            sb.Append("  UseAdaptive: ").Append(UseAdaptive).Append("\n");
            sb.Append("  IsCurrencyConversion: ").Append(IsCurrencyConversion).Append("\n");
            sb.Append("  AllocationMethod: ").Append(AllocationMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderRequest);
        }

        /// <summary>
        /// Returns true if OrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcctId == input.AcctId ||
                    (this.AcctId != null &&
                    this.AcctId.Equals(input.AcctId))
                ) && 
                (
                    this.Conid == input.Conid ||
                    (this.Conid != null &&
                    this.Conid.Equals(input.Conid))
                ) && 
                (
                    this.SecType == input.SecType ||
                    (this.SecType != null &&
                    this.SecType.Equals(input.SecType))
                ) && 
                (
                    this.COID == input.COID ||
                    (this.COID != null &&
                    this.COID.Equals(input.COID))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && 
                (
                    this.ListingExchange == input.ListingExchange ||
                    (this.ListingExchange != null &&
                    this.ListingExchange.Equals(input.ListingExchange))
                ) && 
                (
                    this.OutsideRTH == input.OutsideRTH ||
                    (this.OutsideRTH != null &&
                    this.OutsideRTH.Equals(input.OutsideRTH))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.Tif == input.Tif ||
                    (this.Tif != null &&
                    this.Tif.Equals(input.Tif))
                ) && 
                (
                    this.Referrer == input.Referrer ||
                    (this.Referrer != null &&
                    this.Referrer.Equals(input.Referrer))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.FxQty == input.FxQty ||
                    (this.FxQty != null &&
                    this.FxQty.Equals(input.FxQty))
                ) && 
                (
                    this.UseAdaptive == input.UseAdaptive ||
                    (this.UseAdaptive != null &&
                    this.UseAdaptive.Equals(input.UseAdaptive))
                ) && 
                (
                    this.IsCurrencyConversion == input.IsCurrencyConversion ||
                    (this.IsCurrencyConversion != null &&
                    this.IsCurrencyConversion.Equals(input.IsCurrencyConversion))
                ) && 
                (
                    this.AllocationMethod == input.AllocationMethod ||
                    (this.AllocationMethod != null &&
                    this.AllocationMethod.Equals(input.AllocationMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcctId != null)
                    hashCode = hashCode * 59 + this.AcctId.GetHashCode();
                if (this.Conid != null)
                    hashCode = hashCode * 59 + this.Conid.GetHashCode();
                if (this.SecType != null)
                    hashCode = hashCode * 59 + this.SecType.GetHashCode();
                if (this.COID != null)
                    hashCode = hashCode * 59 + this.COID.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.ListingExchange != null)
                    hashCode = hashCode * 59 + this.ListingExchange.GetHashCode();
                if (this.OutsideRTH != null)
                    hashCode = hashCode * 59 + this.OutsideRTH.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.Tif != null)
                    hashCode = hashCode * 59 + this.Tif.GetHashCode();
                if (this.Referrer != null)
                    hashCode = hashCode * 59 + this.Referrer.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.FxQty != null)
                    hashCode = hashCode * 59 + this.FxQty.GetHashCode();
                if (this.UseAdaptive != null)
                    hashCode = hashCode * 59 + this.UseAdaptive.GetHashCode();
                if (this.IsCurrencyConversion != null)
                    hashCode = hashCode * 59 + this.IsCurrencyConversion.GetHashCode();
                if (this.AllocationMethod != null)
                    hashCode = hashCode * 59 + this.AllocationMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
