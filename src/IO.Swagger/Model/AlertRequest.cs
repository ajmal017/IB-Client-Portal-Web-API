/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AlertRequest
    /// </summary>
    [DataContract]
    public partial class AlertRequest :  IEquatable<AlertRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertRequest" /> class.
        /// </summary>
        /// <param name="orderId">orderId is required when modifying alert. You can get it from /iserver/account/{accountId}/alerts .</param>
        /// <param name="alertName">name of alert.</param>
        /// <param name="alertMessage">The message you want to receive via email or text message.</param>
        /// <param name="alertRepeatable">whether alert is repeatable or not, so value can only be 0 or 1, this has to be 1 for MTA alert.</param>
        /// <param name="email">email address to receive alert.</param>
        /// <param name="sendMessage">whether allowing to send email or not, so value can only be 0 or 1, .</param>
        /// <param name="tif">time in force, can only be GTC or GTD.</param>
        /// <param name="expireTime">format, YYYYMMDD-HH:mm:ss, please NOTE this will only work when tif is GTD .</param>
        /// <param name="outsideRth">value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours. .</param>
        /// <param name="iTWSOrdersOnly">value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile .</param>
        /// <param name="showPopup">value can only be 0 or 1, set to 1 to allow to show alert in pop-ups.</param>
        /// <param name="toolId">for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert .</param>
        /// <param name="playAudio">audio message to play when alert is triggered.</param>
        /// <param name="conditions">conditions.</param>
        public AlertRequest(int? orderId = default(int?), string alertName = default(string), string alertMessage = default(string), int? alertRepeatable = default(int?), string email = default(string), int? sendMessage = default(int?), string tif = default(string), string expireTime = default(string), int? outsideRth = default(int?), int? iTWSOrdersOnly = default(int?), int? showPopup = default(int?), int? toolId = default(int?), string playAudio = default(string), List<Object> conditions = default(List<Object>))
        {
            this.OrderId = orderId;
            this.AlertName = alertName;
            this.AlertMessage = alertMessage;
            this.AlertRepeatable = alertRepeatable;
            this.Email = email;
            this.SendMessage = sendMessage;
            this.Tif = tif;
            this.ExpireTime = expireTime;
            this.OutsideRth = outsideRth;
            this.ITWSOrdersOnly = iTWSOrdersOnly;
            this.ShowPopup = showPopup;
            this.ToolId = toolId;
            this.PlayAudio = playAudio;
            this.Conditions = conditions;
        }
        
        /// <summary>
        /// orderId is required when modifying alert. You can get it from /iserver/account/{accountId}/alerts 
        /// </summary>
        /// <value>orderId is required when modifying alert. You can get it from /iserver/account/{accountId}/alerts </value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }

        /// <summary>
        /// name of alert
        /// </summary>
        /// <value>name of alert</value>
        [DataMember(Name="alertName", EmitDefaultValue=false)]
        public string AlertName { get; set; }

        /// <summary>
        /// The message you want to receive via email or text message
        /// </summary>
        /// <value>The message you want to receive via email or text message</value>
        [DataMember(Name="alertMessage", EmitDefaultValue=false)]
        public string AlertMessage { get; set; }

        /// <summary>
        /// whether alert is repeatable or not, so value can only be 0 or 1, this has to be 1 for MTA alert
        /// </summary>
        /// <value>whether alert is repeatable or not, so value can only be 0 or 1, this has to be 1 for MTA alert</value>
        [DataMember(Name="alertRepeatable", EmitDefaultValue=false)]
        public int? AlertRepeatable { get; set; }

        /// <summary>
        /// email address to receive alert
        /// </summary>
        /// <value>email address to receive alert</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// whether allowing to send email or not, so value can only be 0 or 1, 
        /// </summary>
        /// <value>whether allowing to send email or not, so value can only be 0 or 1, </value>
        [DataMember(Name="sendMessage", EmitDefaultValue=false)]
        public int? SendMessage { get; set; }

        /// <summary>
        /// time in force, can only be GTC or GTD
        /// </summary>
        /// <value>time in force, can only be GTC or GTD</value>
        [DataMember(Name="tif", EmitDefaultValue=false)]
        public string Tif { get; set; }

        /// <summary>
        /// format, YYYYMMDD-HH:mm:ss, please NOTE this will only work when tif is GTD 
        /// </summary>
        /// <value>format, YYYYMMDD-HH:mm:ss, please NOTE this will only work when tif is GTD </value>
        [DataMember(Name="expireTime", EmitDefaultValue=false)]
        public string ExpireTime { get; set; }

        /// <summary>
        /// value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours. 
        /// </summary>
        /// <value>value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours. </value>
        [DataMember(Name="outsideRth", EmitDefaultValue=false)]
        public int? OutsideRth { get; set; }

        /// <summary>
        /// value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile 
        /// </summary>
        /// <value>value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile </value>
        [DataMember(Name="iTWSOrdersOnly", EmitDefaultValue=false)]
        public int? ITWSOrdersOnly { get; set; }

        /// <summary>
        /// value can only be 0 or 1, set to 1 to allow to show alert in pop-ups
        /// </summary>
        /// <value>value can only be 0 or 1, set to 1 to allow to show alert in pop-ups</value>
        [DataMember(Name="showPopup", EmitDefaultValue=false)]
        public int? ShowPopup { get; set; }

        /// <summary>
        /// for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert 
        /// </summary>
        /// <value>for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert </value>
        [DataMember(Name="toolId", EmitDefaultValue=false)]
        public int? ToolId { get; set; }

        /// <summary>
        /// audio message to play when alert is triggered
        /// </summary>
        /// <value>audio message to play when alert is triggered</value>
        [DataMember(Name="playAudio", EmitDefaultValue=false)]
        public string PlayAudio { get; set; }

        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [DataMember(Name="conditions", EmitDefaultValue=false)]
        public List<Object> Conditions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertRequest {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  AlertName: ").Append(AlertName).Append("\n");
            sb.Append("  AlertMessage: ").Append(AlertMessage).Append("\n");
            sb.Append("  AlertRepeatable: ").Append(AlertRepeatable).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  SendMessage: ").Append(SendMessage).Append("\n");
            sb.Append("  Tif: ").Append(Tif).Append("\n");
            sb.Append("  ExpireTime: ").Append(ExpireTime).Append("\n");
            sb.Append("  OutsideRth: ").Append(OutsideRth).Append("\n");
            sb.Append("  ITWSOrdersOnly: ").Append(ITWSOrdersOnly).Append("\n");
            sb.Append("  ShowPopup: ").Append(ShowPopup).Append("\n");
            sb.Append("  ToolId: ").Append(ToolId).Append("\n");
            sb.Append("  PlayAudio: ").Append(PlayAudio).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertRequest);
        }

        /// <summary>
        /// Returns true if AlertRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.AlertName == input.AlertName ||
                    (this.AlertName != null &&
                    this.AlertName.Equals(input.AlertName))
                ) && 
                (
                    this.AlertMessage == input.AlertMessage ||
                    (this.AlertMessage != null &&
                    this.AlertMessage.Equals(input.AlertMessage))
                ) && 
                (
                    this.AlertRepeatable == input.AlertRepeatable ||
                    (this.AlertRepeatable != null &&
                    this.AlertRepeatable.Equals(input.AlertRepeatable))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.SendMessage == input.SendMessage ||
                    (this.SendMessage != null &&
                    this.SendMessage.Equals(input.SendMessage))
                ) && 
                (
                    this.Tif == input.Tif ||
                    (this.Tif != null &&
                    this.Tif.Equals(input.Tif))
                ) && 
                (
                    this.ExpireTime == input.ExpireTime ||
                    (this.ExpireTime != null &&
                    this.ExpireTime.Equals(input.ExpireTime))
                ) && 
                (
                    this.OutsideRth == input.OutsideRth ||
                    (this.OutsideRth != null &&
                    this.OutsideRth.Equals(input.OutsideRth))
                ) && 
                (
                    this.ITWSOrdersOnly == input.ITWSOrdersOnly ||
                    (this.ITWSOrdersOnly != null &&
                    this.ITWSOrdersOnly.Equals(input.ITWSOrdersOnly))
                ) && 
                (
                    this.ShowPopup == input.ShowPopup ||
                    (this.ShowPopup != null &&
                    this.ShowPopup.Equals(input.ShowPopup))
                ) && 
                (
                    this.ToolId == input.ToolId ||
                    (this.ToolId != null &&
                    this.ToolId.Equals(input.ToolId))
                ) && 
                (
                    this.PlayAudio == input.PlayAudio ||
                    (this.PlayAudio != null &&
                    this.PlayAudio.Equals(input.PlayAudio))
                ) && 
                (
                    this.Conditions == input.Conditions ||
                    this.Conditions != null &&
                    this.Conditions.SequenceEqual(input.Conditions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.AlertName != null)
                    hashCode = hashCode * 59 + this.AlertName.GetHashCode();
                if (this.AlertMessage != null)
                    hashCode = hashCode * 59 + this.AlertMessage.GetHashCode();
                if (this.AlertRepeatable != null)
                    hashCode = hashCode * 59 + this.AlertRepeatable.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.SendMessage != null)
                    hashCode = hashCode * 59 + this.SendMessage.GetHashCode();
                if (this.Tif != null)
                    hashCode = hashCode * 59 + this.Tif.GetHashCode();
                if (this.ExpireTime != null)
                    hashCode = hashCode * 59 + this.ExpireTime.GetHashCode();
                if (this.OutsideRth != null)
                    hashCode = hashCode * 59 + this.OutsideRth.GetHashCode();
                if (this.ITWSOrdersOnly != null)
                    hashCode = hashCode * 59 + this.ITWSOrdersOnly.GetHashCode();
                if (this.ShowPopup != null)
                    hashCode = hashCode * 59 + this.ShowPopup.GetHashCode();
                if (this.ToolId != null)
                    hashCode = hashCode * 59 + this.ToolId.GetHashCode();
                if (this.PlayAudio != null)
                    hashCode = hashCode * 59 + this.PlayAudio.GetHashCode();
                if (this.Conditions != null)
                    hashCode = hashCode * 59 + this.Conditions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
