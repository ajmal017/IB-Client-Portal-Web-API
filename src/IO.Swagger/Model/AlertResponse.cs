/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AlertResponse
    /// </summary>
    [DataContract]
    public partial class AlertResponse :  IEquatable<AlertResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertResponse" /> class.
        /// </summary>
        /// <param name="account">account id.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="alertName">name of alert.</param>
        /// <param name="alertMessage">The message you want to receive via email or text message.</param>
        /// <param name="alertActive">whether alert is active or not, so value can only be 0 or 1.</param>
        /// <param name="alertRepeatable">whether alert is repeatable or not, so value can only be 0 or 1.</param>
        /// <param name="alertEmail">email address to receive alert.</param>
        /// <param name="alertSendMessage">whether allowing to send email or not, so value can only be 0 or 1, .</param>
        /// <param name="tif">time in force, can only be GTC or GTD.</param>
        /// <param name="expireTime">format, YYYYMMDD-HH:mm:ss .</param>
        /// <param name="orderStatus">status of alert.</param>
        /// <param name="outsideRth">value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours. .</param>
        /// <param name="itwsOrdersOnly">value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile .</param>
        /// <param name="alertShowPopup">value can only be 0 or 1, set to 1 to allow to show alert in pop-ups.</param>
        /// <param name="alertTriggered">whether the alert has been triggered.</param>
        /// <param name="orderNotEditable">whether the alert can be edited.</param>
        /// <param name="toolId">for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert .</param>
        /// <param name="alertPlayAudio">audio message to play when alert is triggered.</param>
        /// <param name="alertMtaCurrency">MTA alert only.</param>
        /// <param name="alertMtaDefaults">MTA alert only.</param>
        /// <param name="timeZone">MTA alert only.</param>
        /// <param name="alertDefaultType">MTA alert only.</param>
        /// <param name="conditionSize">size of conditions array.</param>
        /// <param name="conditionOutsideRth">whether allowing the condition can be triggered outside of regular trading hours, 1 means allow.</param>
        /// <param name="conditions">conditions.</param>
        public AlertResponse(string account = default(string), int? orderId = default(int?), string alertName = default(string), string alertMessage = default(string), int? alertActive = default(int?), int? alertRepeatable = default(int?), string alertEmail = default(string), int? alertSendMessage = default(int?), string tif = default(string), string expireTime = default(string), string orderStatus = default(string), int? outsideRth = default(int?), int? itwsOrdersOnly = default(int?), int? alertShowPopup = default(int?), bool? alertTriggered = default(bool?), bool? orderNotEditable = default(bool?), int? toolId = default(int?), string alertPlayAudio = default(string), string alertMtaCurrency = default(string), string alertMtaDefaults = default(string), string timeZone = default(string), string alertDefaultType = default(string), int? conditionSize = default(int?), int? conditionOutsideRth = default(int?), List<Object> conditions = default(List<Object>))
        {
            this.Account = account;
            this.OrderId = orderId;
            this.AlertName = alertName;
            this.AlertMessage = alertMessage;
            this.AlertActive = alertActive;
            this.AlertRepeatable = alertRepeatable;
            this.AlertEmail = alertEmail;
            this.AlertSendMessage = alertSendMessage;
            this.Tif = tif;
            this.ExpireTime = expireTime;
            this.OrderStatus = orderStatus;
            this.OutsideRth = outsideRth;
            this.ItwsOrdersOnly = itwsOrdersOnly;
            this.AlertShowPopup = alertShowPopup;
            this.AlertTriggered = alertTriggered;
            this.OrderNotEditable = orderNotEditable;
            this.ToolId = toolId;
            this.AlertPlayAudio = alertPlayAudio;
            this.AlertMtaCurrency = alertMtaCurrency;
            this.AlertMtaDefaults = alertMtaDefaults;
            this.TimeZone = timeZone;
            this.AlertDefaultType = alertDefaultType;
            this.ConditionSize = conditionSize;
            this.ConditionOutsideRth = conditionOutsideRth;
            this.Conditions = conditions;
        }
        
        /// <summary>
        /// account id
        /// </summary>
        /// <value>account id</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public int? OrderId { get; set; }

        /// <summary>
        /// name of alert
        /// </summary>
        /// <value>name of alert</value>
        [DataMember(Name="alert_name", EmitDefaultValue=false)]
        public string AlertName { get; set; }

        /// <summary>
        /// The message you want to receive via email or text message
        /// </summary>
        /// <value>The message you want to receive via email or text message</value>
        [DataMember(Name="alert_message", EmitDefaultValue=false)]
        public string AlertMessage { get; set; }

        /// <summary>
        /// whether alert is active or not, so value can only be 0 or 1
        /// </summary>
        /// <value>whether alert is active or not, so value can only be 0 or 1</value>
        [DataMember(Name="alert_active", EmitDefaultValue=false)]
        public int? AlertActive { get; set; }

        /// <summary>
        /// whether alert is repeatable or not, so value can only be 0 or 1
        /// </summary>
        /// <value>whether alert is repeatable or not, so value can only be 0 or 1</value>
        [DataMember(Name="alert_repeatable", EmitDefaultValue=false)]
        public int? AlertRepeatable { get; set; }

        /// <summary>
        /// email address to receive alert
        /// </summary>
        /// <value>email address to receive alert</value>
        [DataMember(Name="alert_email", EmitDefaultValue=false)]
        public string AlertEmail { get; set; }

        /// <summary>
        /// whether allowing to send email or not, so value can only be 0 or 1, 
        /// </summary>
        /// <value>whether allowing to send email or not, so value can only be 0 or 1, </value>
        [DataMember(Name="alert_send_message", EmitDefaultValue=false)]
        public int? AlertSendMessage { get; set; }

        /// <summary>
        /// time in force, can only be GTC or GTD
        /// </summary>
        /// <value>time in force, can only be GTC or GTD</value>
        [DataMember(Name="tif", EmitDefaultValue=false)]
        public string Tif { get; set; }

        /// <summary>
        /// format, YYYYMMDD-HH:mm:ss 
        /// </summary>
        /// <value>format, YYYYMMDD-HH:mm:ss </value>
        [DataMember(Name="expire_time", EmitDefaultValue=false)]
        public string ExpireTime { get; set; }

        /// <summary>
        /// status of alert
        /// </summary>
        /// <value>status of alert</value>
        [DataMember(Name="order_status", EmitDefaultValue=false)]
        public string OrderStatus { get; set; }

        /// <summary>
        /// value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours. 
        /// </summary>
        /// <value>value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours. </value>
        [DataMember(Name="outsideRth", EmitDefaultValue=false)]
        public int? OutsideRth { get; set; }

        /// <summary>
        /// value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile 
        /// </summary>
        /// <value>value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile </value>
        [DataMember(Name="itws_orders_only", EmitDefaultValue=false)]
        public int? ItwsOrdersOnly { get; set; }

        /// <summary>
        /// value can only be 0 or 1, set to 1 to allow to show alert in pop-ups
        /// </summary>
        /// <value>value can only be 0 or 1, set to 1 to allow to show alert in pop-ups</value>
        [DataMember(Name="alert_show_popup", EmitDefaultValue=false)]
        public int? AlertShowPopup { get; set; }

        /// <summary>
        /// whether the alert has been triggered
        /// </summary>
        /// <value>whether the alert has been triggered</value>
        [DataMember(Name="alert_triggered", EmitDefaultValue=false)]
        public bool? AlertTriggered { get; set; }

        /// <summary>
        /// whether the alert can be edited
        /// </summary>
        /// <value>whether the alert can be edited</value>
        [DataMember(Name="order_not_editable", EmitDefaultValue=false)]
        public bool? OrderNotEditable { get; set; }

        /// <summary>
        /// for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert 
        /// </summary>
        /// <value>for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert </value>
        [DataMember(Name="tool_id", EmitDefaultValue=false)]
        public int? ToolId { get; set; }

        /// <summary>
        /// audio message to play when alert is triggered
        /// </summary>
        /// <value>audio message to play when alert is triggered</value>
        [DataMember(Name="alert_play_audio", EmitDefaultValue=false)]
        public string AlertPlayAudio { get; set; }

        /// <summary>
        /// MTA alert only
        /// </summary>
        /// <value>MTA alert only</value>
        [DataMember(Name="alert_mta_currency", EmitDefaultValue=false)]
        public string AlertMtaCurrency { get; set; }

        /// <summary>
        /// MTA alert only
        /// </summary>
        /// <value>MTA alert only</value>
        [DataMember(Name="alert_mta_defaults", EmitDefaultValue=false)]
        public string AlertMtaDefaults { get; set; }

        /// <summary>
        /// MTA alert only
        /// </summary>
        /// <value>MTA alert only</value>
        [DataMember(Name="time_zone", EmitDefaultValue=false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// MTA alert only
        /// </summary>
        /// <value>MTA alert only</value>
        [DataMember(Name="alert_default_type", EmitDefaultValue=false)]
        public string AlertDefaultType { get; set; }

        /// <summary>
        /// size of conditions array
        /// </summary>
        /// <value>size of conditions array</value>
        [DataMember(Name="condition_size", EmitDefaultValue=false)]
        public int? ConditionSize { get; set; }

        /// <summary>
        /// whether allowing the condition can be triggered outside of regular trading hours, 1 means allow
        /// </summary>
        /// <value>whether allowing the condition can be triggered outside of regular trading hours, 1 means allow</value>
        [DataMember(Name="condition_outside_rth", EmitDefaultValue=false)]
        public int? ConditionOutsideRth { get; set; }

        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [DataMember(Name="conditions", EmitDefaultValue=false)]
        public List<Object> Conditions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertResponse {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  AlertName: ").Append(AlertName).Append("\n");
            sb.Append("  AlertMessage: ").Append(AlertMessage).Append("\n");
            sb.Append("  AlertActive: ").Append(AlertActive).Append("\n");
            sb.Append("  AlertRepeatable: ").Append(AlertRepeatable).Append("\n");
            sb.Append("  AlertEmail: ").Append(AlertEmail).Append("\n");
            sb.Append("  AlertSendMessage: ").Append(AlertSendMessage).Append("\n");
            sb.Append("  Tif: ").Append(Tif).Append("\n");
            sb.Append("  ExpireTime: ").Append(ExpireTime).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  OutsideRth: ").Append(OutsideRth).Append("\n");
            sb.Append("  ItwsOrdersOnly: ").Append(ItwsOrdersOnly).Append("\n");
            sb.Append("  AlertShowPopup: ").Append(AlertShowPopup).Append("\n");
            sb.Append("  AlertTriggered: ").Append(AlertTriggered).Append("\n");
            sb.Append("  OrderNotEditable: ").Append(OrderNotEditable).Append("\n");
            sb.Append("  ToolId: ").Append(ToolId).Append("\n");
            sb.Append("  AlertPlayAudio: ").Append(AlertPlayAudio).Append("\n");
            sb.Append("  AlertMtaCurrency: ").Append(AlertMtaCurrency).Append("\n");
            sb.Append("  AlertMtaDefaults: ").Append(AlertMtaDefaults).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  AlertDefaultType: ").Append(AlertDefaultType).Append("\n");
            sb.Append("  ConditionSize: ").Append(ConditionSize).Append("\n");
            sb.Append("  ConditionOutsideRth: ").Append(ConditionOutsideRth).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertResponse);
        }

        /// <summary>
        /// Returns true if AlertResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.AlertName == input.AlertName ||
                    (this.AlertName != null &&
                    this.AlertName.Equals(input.AlertName))
                ) && 
                (
                    this.AlertMessage == input.AlertMessage ||
                    (this.AlertMessage != null &&
                    this.AlertMessage.Equals(input.AlertMessage))
                ) && 
                (
                    this.AlertActive == input.AlertActive ||
                    (this.AlertActive != null &&
                    this.AlertActive.Equals(input.AlertActive))
                ) && 
                (
                    this.AlertRepeatable == input.AlertRepeatable ||
                    (this.AlertRepeatable != null &&
                    this.AlertRepeatable.Equals(input.AlertRepeatable))
                ) && 
                (
                    this.AlertEmail == input.AlertEmail ||
                    (this.AlertEmail != null &&
                    this.AlertEmail.Equals(input.AlertEmail))
                ) && 
                (
                    this.AlertSendMessage == input.AlertSendMessage ||
                    (this.AlertSendMessage != null &&
                    this.AlertSendMessage.Equals(input.AlertSendMessage))
                ) && 
                (
                    this.Tif == input.Tif ||
                    (this.Tif != null &&
                    this.Tif.Equals(input.Tif))
                ) && 
                (
                    this.ExpireTime == input.ExpireTime ||
                    (this.ExpireTime != null &&
                    this.ExpireTime.Equals(input.ExpireTime))
                ) && 
                (
                    this.OrderStatus == input.OrderStatus ||
                    (this.OrderStatus != null &&
                    this.OrderStatus.Equals(input.OrderStatus))
                ) && 
                (
                    this.OutsideRth == input.OutsideRth ||
                    (this.OutsideRth != null &&
                    this.OutsideRth.Equals(input.OutsideRth))
                ) && 
                (
                    this.ItwsOrdersOnly == input.ItwsOrdersOnly ||
                    (this.ItwsOrdersOnly != null &&
                    this.ItwsOrdersOnly.Equals(input.ItwsOrdersOnly))
                ) && 
                (
                    this.AlertShowPopup == input.AlertShowPopup ||
                    (this.AlertShowPopup != null &&
                    this.AlertShowPopup.Equals(input.AlertShowPopup))
                ) && 
                (
                    this.AlertTriggered == input.AlertTriggered ||
                    (this.AlertTriggered != null &&
                    this.AlertTriggered.Equals(input.AlertTriggered))
                ) && 
                (
                    this.OrderNotEditable == input.OrderNotEditable ||
                    (this.OrderNotEditable != null &&
                    this.OrderNotEditable.Equals(input.OrderNotEditable))
                ) && 
                (
                    this.ToolId == input.ToolId ||
                    (this.ToolId != null &&
                    this.ToolId.Equals(input.ToolId))
                ) && 
                (
                    this.AlertPlayAudio == input.AlertPlayAudio ||
                    (this.AlertPlayAudio != null &&
                    this.AlertPlayAudio.Equals(input.AlertPlayAudio))
                ) && 
                (
                    this.AlertMtaCurrency == input.AlertMtaCurrency ||
                    (this.AlertMtaCurrency != null &&
                    this.AlertMtaCurrency.Equals(input.AlertMtaCurrency))
                ) && 
                (
                    this.AlertMtaDefaults == input.AlertMtaDefaults ||
                    (this.AlertMtaDefaults != null &&
                    this.AlertMtaDefaults.Equals(input.AlertMtaDefaults))
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) && 
                (
                    this.AlertDefaultType == input.AlertDefaultType ||
                    (this.AlertDefaultType != null &&
                    this.AlertDefaultType.Equals(input.AlertDefaultType))
                ) && 
                (
                    this.ConditionSize == input.ConditionSize ||
                    (this.ConditionSize != null &&
                    this.ConditionSize.Equals(input.ConditionSize))
                ) && 
                (
                    this.ConditionOutsideRth == input.ConditionOutsideRth ||
                    (this.ConditionOutsideRth != null &&
                    this.ConditionOutsideRth.Equals(input.ConditionOutsideRth))
                ) && 
                (
                    this.Conditions == input.Conditions ||
                    this.Conditions != null &&
                    this.Conditions.SequenceEqual(input.Conditions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.AlertName != null)
                    hashCode = hashCode * 59 + this.AlertName.GetHashCode();
                if (this.AlertMessage != null)
                    hashCode = hashCode * 59 + this.AlertMessage.GetHashCode();
                if (this.AlertActive != null)
                    hashCode = hashCode * 59 + this.AlertActive.GetHashCode();
                if (this.AlertRepeatable != null)
                    hashCode = hashCode * 59 + this.AlertRepeatable.GetHashCode();
                if (this.AlertEmail != null)
                    hashCode = hashCode * 59 + this.AlertEmail.GetHashCode();
                if (this.AlertSendMessage != null)
                    hashCode = hashCode * 59 + this.AlertSendMessage.GetHashCode();
                if (this.Tif != null)
                    hashCode = hashCode * 59 + this.Tif.GetHashCode();
                if (this.ExpireTime != null)
                    hashCode = hashCode * 59 + this.ExpireTime.GetHashCode();
                if (this.OrderStatus != null)
                    hashCode = hashCode * 59 + this.OrderStatus.GetHashCode();
                if (this.OutsideRth != null)
                    hashCode = hashCode * 59 + this.OutsideRth.GetHashCode();
                if (this.ItwsOrdersOnly != null)
                    hashCode = hashCode * 59 + this.ItwsOrdersOnly.GetHashCode();
                if (this.AlertShowPopup != null)
                    hashCode = hashCode * 59 + this.AlertShowPopup.GetHashCode();
                if (this.AlertTriggered != null)
                    hashCode = hashCode * 59 + this.AlertTriggered.GetHashCode();
                if (this.OrderNotEditable != null)
                    hashCode = hashCode * 59 + this.OrderNotEditable.GetHashCode();
                if (this.ToolId != null)
                    hashCode = hashCode * 59 + this.ToolId.GetHashCode();
                if (this.AlertPlayAudio != null)
                    hashCode = hashCode * 59 + this.AlertPlayAudio.GetHashCode();
                if (this.AlertMtaCurrency != null)
                    hashCode = hashCode * 59 + this.AlertMtaCurrency.GetHashCode();
                if (this.AlertMtaDefaults != null)
                    hashCode = hashCode * 59 + this.AlertMtaDefaults.GetHashCode();
                if (this.TimeZone != null)
                    hashCode = hashCode * 59 + this.TimeZone.GetHashCode();
                if (this.AlertDefaultType != null)
                    hashCode = hashCode * 59 + this.AlertDefaultType.GetHashCode();
                if (this.ConditionSize != null)
                    hashCode = hashCode * 59 + this.ConditionSize.GetHashCode();
                if (this.ConditionOutsideRth != null)
                    hashCode = hashCode * 59 + this.ConditionOutsideRth.GetHashCode();
                if (this.Conditions != null)
                    hashCode = hashCode * 59 + this.Conditions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
