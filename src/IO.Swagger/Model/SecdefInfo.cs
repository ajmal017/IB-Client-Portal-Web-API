/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Contains some basic info of contract
    /// </summary>
    [DataContract]
    public partial class SecdefInfo :  IEquatable<SecdefInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecdefInfo" /> class.
        /// </summary>
        /// <param name="conid">conid.</param>
        /// <param name="symbol">For example IBKR.</param>
        /// <param name="secType">secType.</param>
        /// <param name="exchange">exchange.</param>
        /// <param name="listingExchange">listingExchange.</param>
        /// <param name="right">C &#x3D; Call Option, P &#x3D; Put Option.</param>
        /// <param name="strike">The strike price also known as exercise price.</param>
        /// <param name="currency">Currency the contract trades in.</param>
        /// <param name="cusip">Committee on Uniform Securities Identification Procedures number.</param>
        /// <param name="coupon">Annual interest rate paid on a bond.</param>
        /// <param name="desc1">Formatted symbol.</param>
        /// <param name="desc2">Formatted expiration, strike and right.</param>
        /// <param name="maturityDate">Format YYYYMMDD, the date on which the underlying transaction settles if the option is exercised.</param>
        /// <param name="multiplier">total premium paid or received for an option contract.</param>
        /// <param name="tradingClass">tradingClass.</param>
        /// <param name="validExchanges">validExchanges.</param>
        public SecdefInfo(decimal? conid = default(decimal?), string symbol = default(string), string secType = default(string), string exchange = default(string), string listingExchange = default(string), string right = default(string), string strike = default(string), string currency = default(string), string cusip = default(string), string coupon = default(string), string desc1 = default(string), string desc2 = default(string), string maturityDate = default(string), string multiplier = default(string), string tradingClass = default(string), string validExchanges = default(string))
        {
            this.Conid = conid;
            this.Symbol = symbol;
            this.SecType = secType;
            this.Exchange = exchange;
            this.ListingExchange = listingExchange;
            this.Right = right;
            this.Strike = strike;
            this.Currency = currency;
            this.Cusip = cusip;
            this.Coupon = coupon;
            this.Desc1 = desc1;
            this.Desc2 = desc2;
            this.MaturityDate = maturityDate;
            this.Multiplier = multiplier;
            this.TradingClass = tradingClass;
            this.ValidExchanges = validExchanges;
        }
        
        /// <summary>
        /// Gets or Sets Conid
        /// </summary>
        [DataMember(Name="conid", EmitDefaultValue=false)]
        public decimal? Conid { get; set; }

        /// <summary>
        /// For example IBKR
        /// </summary>
        /// <value>For example IBKR</value>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets SecType
        /// </summary>
        [DataMember(Name="secType", EmitDefaultValue=false)]
        public string SecType { get; set; }

        /// <summary>
        /// Gets or Sets Exchange
        /// </summary>
        [DataMember(Name="exchange", EmitDefaultValue=false)]
        public string Exchange { get; set; }

        /// <summary>
        /// Gets or Sets ListingExchange
        /// </summary>
        [DataMember(Name="listingExchange", EmitDefaultValue=false)]
        public string ListingExchange { get; set; }

        /// <summary>
        /// C &#x3D; Call Option, P &#x3D; Put Option
        /// </summary>
        /// <value>C &#x3D; Call Option, P &#x3D; Put Option</value>
        [DataMember(Name="right", EmitDefaultValue=false)]
        public string Right { get; set; }

        /// <summary>
        /// The strike price also known as exercise price
        /// </summary>
        /// <value>The strike price also known as exercise price</value>
        [DataMember(Name="strike", EmitDefaultValue=false)]
        public string Strike { get; set; }

        /// <summary>
        /// Currency the contract trades in
        /// </summary>
        /// <value>Currency the contract trades in</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Committee on Uniform Securities Identification Procedures number
        /// </summary>
        /// <value>Committee on Uniform Securities Identification Procedures number</value>
        [DataMember(Name="cusip", EmitDefaultValue=false)]
        public string Cusip { get; set; }

        /// <summary>
        /// Annual interest rate paid on a bond
        /// </summary>
        /// <value>Annual interest rate paid on a bond</value>
        [DataMember(Name="coupon", EmitDefaultValue=false)]
        public string Coupon { get; set; }

        /// <summary>
        /// Formatted symbol
        /// </summary>
        /// <value>Formatted symbol</value>
        [DataMember(Name="desc1", EmitDefaultValue=false)]
        public string Desc1 { get; set; }

        /// <summary>
        /// Formatted expiration, strike and right
        /// </summary>
        /// <value>Formatted expiration, strike and right</value>
        [DataMember(Name="desc2", EmitDefaultValue=false)]
        public string Desc2 { get; set; }

        /// <summary>
        /// Format YYYYMMDD, the date on which the underlying transaction settles if the option is exercised
        /// </summary>
        /// <value>Format YYYYMMDD, the date on which the underlying transaction settles if the option is exercised</value>
        [DataMember(Name="maturityDate", EmitDefaultValue=false)]
        public string MaturityDate { get; set; }

        /// <summary>
        /// total premium paid or received for an option contract
        /// </summary>
        /// <value>total premium paid or received for an option contract</value>
        [DataMember(Name="multiplier", EmitDefaultValue=false)]
        public string Multiplier { get; set; }

        /// <summary>
        /// Gets or Sets TradingClass
        /// </summary>
        [DataMember(Name="tradingClass", EmitDefaultValue=false)]
        public string TradingClass { get; set; }

        /// <summary>
        /// Gets or Sets ValidExchanges
        /// </summary>
        [DataMember(Name="validExchanges", EmitDefaultValue=false)]
        public string ValidExchanges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecdefInfo {\n");
            sb.Append("  Conid: ").Append(Conid).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  SecType: ").Append(SecType).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  ListingExchange: ").Append(ListingExchange).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("  Strike: ").Append(Strike).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Cusip: ").Append(Cusip).Append("\n");
            sb.Append("  Coupon: ").Append(Coupon).Append("\n");
            sb.Append("  Desc1: ").Append(Desc1).Append("\n");
            sb.Append("  Desc2: ").Append(Desc2).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  Multiplier: ").Append(Multiplier).Append("\n");
            sb.Append("  TradingClass: ").Append(TradingClass).Append("\n");
            sb.Append("  ValidExchanges: ").Append(ValidExchanges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecdefInfo);
        }

        /// <summary>
        /// Returns true if SecdefInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SecdefInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecdefInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Conid == input.Conid ||
                    (this.Conid != null &&
                    this.Conid.Equals(input.Conid))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.SecType == input.SecType ||
                    (this.SecType != null &&
                    this.SecType.Equals(input.SecType))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.ListingExchange == input.ListingExchange ||
                    (this.ListingExchange != null &&
                    this.ListingExchange.Equals(input.ListingExchange))
                ) && 
                (
                    this.Right == input.Right ||
                    (this.Right != null &&
                    this.Right.Equals(input.Right))
                ) && 
                (
                    this.Strike == input.Strike ||
                    (this.Strike != null &&
                    this.Strike.Equals(input.Strike))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Cusip == input.Cusip ||
                    (this.Cusip != null &&
                    this.Cusip.Equals(input.Cusip))
                ) && 
                (
                    this.Coupon == input.Coupon ||
                    (this.Coupon != null &&
                    this.Coupon.Equals(input.Coupon))
                ) && 
                (
                    this.Desc1 == input.Desc1 ||
                    (this.Desc1 != null &&
                    this.Desc1.Equals(input.Desc1))
                ) && 
                (
                    this.Desc2 == input.Desc2 ||
                    (this.Desc2 != null &&
                    this.Desc2.Equals(input.Desc2))
                ) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && 
                (
                    this.Multiplier == input.Multiplier ||
                    (this.Multiplier != null &&
                    this.Multiplier.Equals(input.Multiplier))
                ) && 
                (
                    this.TradingClass == input.TradingClass ||
                    (this.TradingClass != null &&
                    this.TradingClass.Equals(input.TradingClass))
                ) && 
                (
                    this.ValidExchanges == input.ValidExchanges ||
                    (this.ValidExchanges != null &&
                    this.ValidExchanges.Equals(input.ValidExchanges))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Conid != null)
                    hashCode = hashCode * 59 + this.Conid.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.SecType != null)
                    hashCode = hashCode * 59 + this.SecType.GetHashCode();
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.ListingExchange != null)
                    hashCode = hashCode * 59 + this.ListingExchange.GetHashCode();
                if (this.Right != null)
                    hashCode = hashCode * 59 + this.Right.GetHashCode();
                if (this.Strike != null)
                    hashCode = hashCode * 59 + this.Strike.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Cusip != null)
                    hashCode = hashCode * 59 + this.Cusip.GetHashCode();
                if (this.Coupon != null)
                    hashCode = hashCode * 59 + this.Coupon.GetHashCode();
                if (this.Desc1 != null)
                    hashCode = hashCode * 59 + this.Desc1.GetHashCode();
                if (this.Desc2 != null)
                    hashCode = hashCode * 59 + this.Desc2.GetHashCode();
                if (this.MaturityDate != null)
                    hashCode = hashCode * 59 + this.MaturityDate.GetHashCode();
                if (this.Multiplier != null)
                    hashCode = hashCode * 59 + this.Multiplier.GetHashCode();
                if (this.TradingClass != null)
                    hashCode = hashCode * 59 + this.TradingClass.GetHashCode();
                if (this.ValidExchanges != null)
                    hashCode = hashCode * 59 + this.ValidExchanges.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
