/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// account information
    /// </summary>
    [DataContract]
    public partial class Summary :  IEquatable<Summary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Summary" /> class.
        /// </summary>
        /// <param name="total">total.</param>
        /// <param name="startDate">date format- - yyyy-MM-dd.</param>
        /// <param name="excludedAccounts">excludedAccounts.</param>
        /// <param name="lastSuccessfulUpdate">lastSuccessfulUpdate.</param>
        /// <param name="accountSummaries">accountSummaries.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="hasExternalAccounts">indicator of user having configured any external accounts.</param>
        /// <param name="rc">rc.</param>
        /// <param name="currency">currency.</param>
        /// <param name="userId">userId.</param>
        /// <param name="pm">pm.</param>
        /// <param name="view">view.</param>
        /// <param name="balanceByDate">balanceByDate.</param>
        public Summary(Object total = default(Object), string startDate = default(string), List<Object> excludedAccounts = default(List<Object>), string lastSuccessfulUpdate = default(string), List<Object> accountSummaries = default(List<Object>), string endDate = default(string), bool? hasExternalAccounts = default(bool?), int? rc = default(int?), string currency = default(string), string userId = default(string), string pm = default(string), string view = default(string), Object balanceByDate = default(Object))
        {
            this.Total = total;
            this.StartDate = startDate;
            this.ExcludedAccounts = excludedAccounts;
            this.LastSuccessfulUpdate = lastSuccessfulUpdate;
            this.AccountSummaries = accountSummaries;
            this.EndDate = endDate;
            this.HasExternalAccounts = hasExternalAccounts;
            this.Rc = rc;
            this.Currency = currency;
            this.UserId = userId;
            this.Pm = pm;
            this.View = view;
            this.BalanceByDate = balanceByDate;
        }
        
        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public Object Total { get; set; }

        /// <summary>
        /// date format- - yyyy-MM-dd
        /// </summary>
        /// <value>date format- - yyyy-MM-dd</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets ExcludedAccounts
        /// </summary>
        [DataMember(Name="excludedAccounts", EmitDefaultValue=false)]
        public List<Object> ExcludedAccounts { get; set; }

        /// <summary>
        /// Gets or Sets LastSuccessfulUpdate
        /// </summary>
        [DataMember(Name="lastSuccessfulUpdate", EmitDefaultValue=false)]
        public string LastSuccessfulUpdate { get; set; }

        /// <summary>
        /// Gets or Sets AccountSummaries
        /// </summary>
        [DataMember(Name="accountSummaries", EmitDefaultValue=false)]
        public List<Object> AccountSummaries { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// indicator of user having configured any external accounts
        /// </summary>
        /// <value>indicator of user having configured any external accounts</value>
        [DataMember(Name="hasExternalAccounts", EmitDefaultValue=false)]
        public bool? HasExternalAccounts { get; set; }

        /// <summary>
        /// Gets or Sets Rc
        /// </summary>
        [DataMember(Name="rc", EmitDefaultValue=false)]
        public int? Rc { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Pm
        /// </summary>
        [DataMember(Name="pm", EmitDefaultValue=false)]
        public string Pm { get; set; }

        /// <summary>
        /// Gets or Sets View
        /// </summary>
        [DataMember(Name="view", EmitDefaultValue=false)]
        public string View { get; set; }

        /// <summary>
        /// Gets or Sets BalanceByDate
        /// </summary>
        [DataMember(Name="balanceByDate", EmitDefaultValue=false)]
        public Object BalanceByDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Summary {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExcludedAccounts: ").Append(ExcludedAccounts).Append("\n");
            sb.Append("  LastSuccessfulUpdate: ").Append(LastSuccessfulUpdate).Append("\n");
            sb.Append("  AccountSummaries: ").Append(AccountSummaries).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  HasExternalAccounts: ").Append(HasExternalAccounts).Append("\n");
            sb.Append("  Rc: ").Append(Rc).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Pm: ").Append(Pm).Append("\n");
            sb.Append("  View: ").Append(View).Append("\n");
            sb.Append("  BalanceByDate: ").Append(BalanceByDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Summary);
        }

        /// <summary>
        /// Returns true if Summary instances are equal
        /// </summary>
        /// <param name="input">Instance of Summary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Summary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.ExcludedAccounts == input.ExcludedAccounts ||
                    this.ExcludedAccounts != null &&
                    this.ExcludedAccounts.SequenceEqual(input.ExcludedAccounts)
                ) && 
                (
                    this.LastSuccessfulUpdate == input.LastSuccessfulUpdate ||
                    (this.LastSuccessfulUpdate != null &&
                    this.LastSuccessfulUpdate.Equals(input.LastSuccessfulUpdate))
                ) && 
                (
                    this.AccountSummaries == input.AccountSummaries ||
                    this.AccountSummaries != null &&
                    this.AccountSummaries.SequenceEqual(input.AccountSummaries)
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.HasExternalAccounts == input.HasExternalAccounts ||
                    (this.HasExternalAccounts != null &&
                    this.HasExternalAccounts.Equals(input.HasExternalAccounts))
                ) && 
                (
                    this.Rc == input.Rc ||
                    (this.Rc != null &&
                    this.Rc.Equals(input.Rc))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Pm == input.Pm ||
                    (this.Pm != null &&
                    this.Pm.Equals(input.Pm))
                ) && 
                (
                    this.View == input.View ||
                    (this.View != null &&
                    this.View.Equals(input.View))
                ) && 
                (
                    this.BalanceByDate == input.BalanceByDate ||
                    (this.BalanceByDate != null &&
                    this.BalanceByDate.Equals(input.BalanceByDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.ExcludedAccounts != null)
                    hashCode = hashCode * 59 + this.ExcludedAccounts.GetHashCode();
                if (this.LastSuccessfulUpdate != null)
                    hashCode = hashCode * 59 + this.LastSuccessfulUpdate.GetHashCode();
                if (this.AccountSummaries != null)
                    hashCode = hashCode * 59 + this.AccountSummaries.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.HasExternalAccounts != null)
                    hashCode = hashCode * 59 + this.HasExternalAccounts.GetHashCode();
                if (this.Rc != null)
                    hashCode = hashCode * 59 + this.Rc.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Pm != null)
                    hashCode = hashCode * 59 + this.Pm.GetHashCode();
                if (this.View != null)
                    hashCode = hashCode * 59 + this.View.GetHashCode();
                if (this.BalanceByDate != null)
                    hashCode = hashCode * 59 + this.BalanceByDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
