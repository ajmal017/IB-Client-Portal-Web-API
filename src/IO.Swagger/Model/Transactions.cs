/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// account transactions
    /// </summary>
    [DataContract]
    public partial class Transactions :  IEquatable<Transactions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transactions" /> class.
        /// </summary>
        /// <param name="id">will always be getTransactions.</param>
        /// <param name="currency">same as request.</param>
        /// <param name="includesRealTime">Indicates whether current day and realtime data is included in the result.</param>
        /// <param name="from">Period start date. Epoch time, GMT.</param>
        /// <param name="to">Period end date. Epoch time, GMT.</param>
        /// <param name="transactions">Sorted by date descending.</param>
        public Transactions(string id = default(string), string currency = default(string), bool? includesRealTime = default(bool?), decimal? from = default(decimal?), decimal? to = default(decimal?), List<Object> transactions = default(List<Object>))
        {
            this.Id = id;
            this.Currency = currency;
            this.IncludesRealTime = includesRealTime;
            this.From = from;
            this.To = to;
            this._Transactions = transactions;
        }
        
        /// <summary>
        /// will always be getTransactions
        /// </summary>
        /// <value>will always be getTransactions</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// same as request
        /// </summary>
        /// <value>same as request</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Indicates whether current day and realtime data is included in the result
        /// </summary>
        /// <value>Indicates whether current day and realtime data is included in the result</value>
        [DataMember(Name="includesRealTime", EmitDefaultValue=false)]
        public bool? IncludesRealTime { get; set; }

        /// <summary>
        /// Period start date. Epoch time, GMT
        /// </summary>
        /// <value>Period start date. Epoch time, GMT</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public decimal? From { get; set; }

        /// <summary>
        /// Period end date. Epoch time, GMT
        /// </summary>
        /// <value>Period end date. Epoch time, GMT</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public decimal? To { get; set; }

        /// <summary>
        /// Sorted by date descending
        /// </summary>
        /// <value>Sorted by date descending</value>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public List<Object> _Transactions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transactions {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  IncludesRealTime: ").Append(IncludesRealTime).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  _Transactions: ").Append(_Transactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transactions);
        }

        /// <summary>
        /// Returns true if Transactions instances are equal
        /// </summary>
        /// <param name="input">Instance of Transactions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transactions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.IncludesRealTime == input.IncludesRealTime ||
                    (this.IncludesRealTime != null &&
                    this.IncludesRealTime.Equals(input.IncludesRealTime))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this._Transactions == input._Transactions ||
                    this._Transactions != null &&
                    this._Transactions.SequenceEqual(input._Transactions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.IncludesRealTime != null)
                    hashCode = hashCode * 59 + this.IncludesRealTime.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this._Transactions != null)
                    hashCode = hashCode * 59 + this._Transactions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
