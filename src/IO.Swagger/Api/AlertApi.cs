/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;
using DocumentFormat.OpenXml.Wordprocessing;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlertApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate or deactivate an alert
        /// </summary>
        /// <remarks>
        /// Please note, if alertId is 0, it will activate/deactivate all alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">order request info</param>
        /// <returns>Object</returns>
        Object IserverAccountAccountIdAlertActivatePost (string accountId, DocumentFormat.OpenXml.Wordprocessing.Body body);

        /// <summary>
        /// Activate or deactivate an alert
        /// </summary>
        /// <remarks>
        /// Please note, if alertId is 0, it will activate/deactivate all alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">order request info</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IserverAccountAccountIdAlertActivatePostWithHttpInfo (string accountId, DocumentFormat.OpenXml.Wordprocessing.Body body);
        /// <summary>
        /// Delete an alert
        /// </summary>
        /// <remarks>
        /// Please be careful, if alertId is 0, it will delete all alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="alertId">alert id</param>
        /// <returns>Object</returns>
        Object IserverAccountAccountIdAlertAlertIdDelete (string accountId, string alertId);

        /// <summary>
        /// Delete an alert
        /// </summary>
        /// <remarks>
        /// Please be careful, if alertId is 0, it will delete all alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="alertId">alert id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IserverAccountAccountIdAlertAlertIdDeleteWithHttpInfo (string accountId, string alertId);
        /// <summary>
        /// Create or modify alert
        /// </summary>
        /// <remarks>
        /// Please note here, DO NOT pass orderId when creating a new alert, toolId is only required for MTA alert 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">alert info</param>
        /// <returns>Object</returns>
        Object IserverAccountAccountIdAlertPost (string accountId, AlertRequest body);

        /// <summary>
        /// Create or modify alert
        /// </summary>
        /// <remarks>
        /// Please note here, DO NOT pass orderId when creating a new alert, toolId is only required for MTA alert 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">alert info</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IserverAccountAccountIdAlertPostWithHttpInfo (string accountId, AlertRequest body);
        /// <summary>
        /// Get a list of available alerts
        /// </summary>
        /// <remarks>
        /// The response will contain both active and inactive alerts, but it won&#39;t have MTA alert
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> IserverAccountAccountIdAlertsGet (string accountId);

        /// <summary>
        /// Get a list of available alerts
        /// </summary>
        /// <remarks>
        /// The response will contain both active and inactive alerts, but it won&#39;t have MTA alert
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> IserverAccountAccountIdAlertsGetWithHttpInfo (string accountId);
        /// <summary>
        /// Get details of an alert
        /// </summary>
        /// <remarks>
        /// Use the endpoint /iserver/account/{accountId}/alerts to receive the alert id. The order_id in the response is the alert id. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">alert id</param>
        /// <returns>AlertResponse</returns>
        AlertResponse IserverAccountAlertIdGet (string id);

        /// <summary>
        /// Get details of an alert
        /// </summary>
        /// <remarks>
        /// Use the endpoint /iserver/account/{accountId}/alerts to receive the alert id. The order_id in the response is the alert id. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">alert id</param>
        /// <returns>ApiResponse of AlertResponse</returns>
        ApiResponse<AlertResponse> IserverAccountAlertIdGetWithHttpInfo (string id);
        /// <summary>
        /// Get MTA alert
        /// </summary>
        /// <remarks>
        /// Each login user only has one mobile trading assistant (MTA) alert with it&#39;s own unique tool id. The tool id cannot be changed. When modified a new order Id is generated. MTA alerts can not be created or deleted. If you call delete /iserver/account/{accountId}/alert/{alertId}, it will reset MTA to default. See [here](https://www.interactivebrokers.com/en/software/mobileiphonemobile/mobileiphone.htm#monitor/trading-assistant.htm) for more information on MTA alerts. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AlertResponse</returns>
        AlertResponse IserverAccountMtaGet ();

        /// <summary>
        /// Get MTA alert
        /// </summary>
        /// <remarks>
        /// Each login user only has one mobile trading assistant (MTA) alert with it&#39;s own unique tool id. The tool id cannot be changed. When modified a new order Id is generated. MTA alerts can not be created or deleted. If you call delete /iserver/account/{accountId}/alert/{alertId}, it will reset MTA to default. See [here](https://www.interactivebrokers.com/en/software/mobileiphonemobile/mobileiphone.htm#monitor/trading-assistant.htm) for more information on MTA alerts. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AlertResponse</returns>
        ApiResponse<AlertResponse> IserverAccountMtaGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate or deactivate an alert
        /// </summary>
        /// <remarks>
        /// Please note, if alertId is 0, it will activate/deactivate all alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">order request info</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IserverAccountAccountIdAlertActivatePostAsync (string accountId, Body body);

        /// <summary>
        /// Activate or deactivate an alert
        /// </summary>
        /// <remarks>
        /// Please note, if alertId is 0, it will activate/deactivate all alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">order request info</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IserverAccountAccountIdAlertActivatePostAsyncWithHttpInfo (string accountId, Body body);
        /// <summary>
        /// Delete an alert
        /// </summary>
        /// <remarks>
        /// Please be careful, if alertId is 0, it will delete all alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="alertId">alert id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IserverAccountAccountIdAlertAlertIdDeleteAsync (string accountId, string alertId);

        /// <summary>
        /// Delete an alert
        /// </summary>
        /// <remarks>
        /// Please be careful, if alertId is 0, it will delete all alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="alertId">alert id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IserverAccountAccountIdAlertAlertIdDeleteAsyncWithHttpInfo (string accountId, string alertId);
        /// <summary>
        /// Create or modify alert
        /// </summary>
        /// <remarks>
        /// Please note here, DO NOT pass orderId when creating a new alert, toolId is only required for MTA alert 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">alert info</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IserverAccountAccountIdAlertPostAsync (string accountId, AlertRequest body);

        /// <summary>
        /// Create or modify alert
        /// </summary>
        /// <remarks>
        /// Please note here, DO NOT pass orderId when creating a new alert, toolId is only required for MTA alert 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">alert info</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IserverAccountAccountIdAlertPostAsyncWithHttpInfo (string accountId, AlertRequest body);
        /// <summary>
        /// Get a list of available alerts
        /// </summary>
        /// <remarks>
        /// The response will contain both active and inactive alerts, but it won&#39;t have MTA alert
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> IserverAccountAccountIdAlertsGetAsync (string accountId);

        /// <summary>
        /// Get a list of available alerts
        /// </summary>
        /// <remarks>
        /// The response will contain both active and inactive alerts, but it won&#39;t have MTA alert
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> IserverAccountAccountIdAlertsGetAsyncWithHttpInfo (string accountId);
        /// <summary>
        /// Get details of an alert
        /// </summary>
        /// <remarks>
        /// Use the endpoint /iserver/account/{accountId}/alerts to receive the alert id. The order_id in the response is the alert id. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">alert id</param>
        /// <returns>Task of AlertResponse</returns>
        System.Threading.Tasks.Task<AlertResponse> IserverAccountAlertIdGetAsync (string id);

        /// <summary>
        /// Get details of an alert
        /// </summary>
        /// <remarks>
        /// Use the endpoint /iserver/account/{accountId}/alerts to receive the alert id. The order_id in the response is the alert id. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">alert id</param>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertResponse>> IserverAccountAlertIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get MTA alert
        /// </summary>
        /// <remarks>
        /// Each login user only has one mobile trading assistant (MTA) alert with it&#39;s own unique tool id. The tool id cannot be changed. When modified a new order Id is generated. MTA alerts can not be created or deleted. If you call delete /iserver/account/{accountId}/alert/{alertId}, it will reset MTA to default. See [here](https://www.interactivebrokers.com/en/software/mobileiphonemobile/mobileiphone.htm#monitor/trading-assistant.htm) for more information on MTA alerts. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AlertResponse</returns>
        System.Threading.Tasks.Task<AlertResponse> IserverAccountMtaGetAsync ();

        /// <summary>
        /// Get MTA alert
        /// </summary>
        /// <remarks>
        /// Each login user only has one mobile trading assistant (MTA) alert with it&#39;s own unique tool id. The tool id cannot be changed. When modified a new order Id is generated. MTA alerts can not be created or deleted. If you call delete /iserver/account/{accountId}/alert/{alertId}, it will reset MTA to default. See [here](https://www.interactivebrokers.com/en/software/mobileiphonemobile/mobileiphone.htm#monitor/trading-assistant.htm) for more information on MTA alerts. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertResponse>> IserverAccountMtaGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AlertApi : IAlertApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlertApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AlertApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate or deactivate an alert Please note, if alertId is 0, it will activate/deactivate all alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">order request info</param>
        /// <returns>Object</returns>
        public Object IserverAccountAccountIdAlertActivatePost (string accountId, DocumentFormat.OpenXml.Wordprocessing.Body body)
        {
             ApiResponse<Object> localVarResponse = IserverAccountAccountIdAlertActivatePostWithHttpInfo(accountId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activate or deactivate an alert Please note, if alertId is 0, it will activate/deactivate all alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">order request info</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > IserverAccountAccountIdAlertActivatePostWithHttpInfo (string accountId, DocumentFormat.OpenXml.Wordprocessing.Body body)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AlertApi->IserverAccountAccountIdAlertActivatePost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertApi->IserverAccountAccountIdAlertActivatePost");

            var localVarPath = "/iserver/account/{accountId}/alert/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverAccountAccountIdAlertActivatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Activate or deactivate an alert Please note, if alertId is 0, it will activate/deactivate all alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">order request info</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IserverAccountAccountIdAlertActivatePostAsync (string accountId, Body body)
        {
             ApiResponse<Object> localVarResponse = await IserverAccountAccountIdAlertActivatePostAsyncWithHttpInfo(accountId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activate or deactivate an alert Please note, if alertId is 0, it will activate/deactivate all alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">order request info</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IserverAccountAccountIdAlertActivatePostAsyncWithHttpInfo (string accountId, Body body)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AlertApi->IserverAccountAccountIdAlertActivatePost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertApi->IserverAccountAccountIdAlertActivatePost");

            var localVarPath = "/iserver/account/{accountId}/alert/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverAccountAccountIdAlertActivatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete an alert Please be careful, if alertId is 0, it will delete all alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="alertId">alert id</param>
        /// <returns>Object</returns>
        public Object IserverAccountAccountIdAlertAlertIdDelete (string accountId, string alertId)
        {
             ApiResponse<Object> localVarResponse = IserverAccountAccountIdAlertAlertIdDeleteWithHttpInfo(accountId, alertId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an alert Please be careful, if alertId is 0, it will delete all alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="alertId">alert id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > IserverAccountAccountIdAlertAlertIdDeleteWithHttpInfo (string accountId, string alertId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AlertApi->IserverAccountAccountIdAlertAlertIdDelete");
            // verify the required parameter 'alertId' is set
            if (alertId == null)
                throw new ApiException(400, "Missing required parameter 'alertId' when calling AlertApi->IserverAccountAccountIdAlertAlertIdDelete");

            var localVarPath = "/iserver/account/{accountId}/alert/{alertId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (alertId != null) localVarPathParams.Add("alertId", this.Configuration.ApiClient.ParameterToString(alertId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverAccountAccountIdAlertAlertIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete an alert Please be careful, if alertId is 0, it will delete all alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="alertId">alert id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IserverAccountAccountIdAlertAlertIdDeleteAsync (string accountId, string alertId)
        {
             ApiResponse<Object> localVarResponse = await IserverAccountAccountIdAlertAlertIdDeleteAsyncWithHttpInfo(accountId, alertId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an alert Please be careful, if alertId is 0, it will delete all alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="alertId">alert id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IserverAccountAccountIdAlertAlertIdDeleteAsyncWithHttpInfo (string accountId, string alertId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AlertApi->IserverAccountAccountIdAlertAlertIdDelete");
            // verify the required parameter 'alertId' is set
            if (alertId == null)
                throw new ApiException(400, "Missing required parameter 'alertId' when calling AlertApi->IserverAccountAccountIdAlertAlertIdDelete");

            var localVarPath = "/iserver/account/{accountId}/alert/{alertId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (alertId != null) localVarPathParams.Add("alertId", this.Configuration.ApiClient.ParameterToString(alertId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverAccountAccountIdAlertAlertIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create or modify alert Please note here, DO NOT pass orderId when creating a new alert, toolId is only required for MTA alert 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">alert info</param>
        /// <returns>Object</returns>
        public Object IserverAccountAccountIdAlertPost (string accountId, AlertRequest body)
        {
             ApiResponse<Object> localVarResponse = IserverAccountAccountIdAlertPostWithHttpInfo(accountId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or modify alert Please note here, DO NOT pass orderId when creating a new alert, toolId is only required for MTA alert 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">alert info</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > IserverAccountAccountIdAlertPostWithHttpInfo (string accountId, AlertRequest body)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AlertApi->IserverAccountAccountIdAlertPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertApi->IserverAccountAccountIdAlertPost");

            var localVarPath = "/iserver/account/{accountId}/alert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverAccountAccountIdAlertPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create or modify alert Please note here, DO NOT pass orderId when creating a new alert, toolId is only required for MTA alert 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">alert info</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IserverAccountAccountIdAlertPostAsync (string accountId, AlertRequest body)
        {
             ApiResponse<Object> localVarResponse = await IserverAccountAccountIdAlertPostAsyncWithHttpInfo(accountId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or modify alert Please note here, DO NOT pass orderId when creating a new alert, toolId is only required for MTA alert 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="body">alert info</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IserverAccountAccountIdAlertPostAsyncWithHttpInfo (string accountId, AlertRequest body)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AlertApi->IserverAccountAccountIdAlertPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertApi->IserverAccountAccountIdAlertPost");

            var localVarPath = "/iserver/account/{accountId}/alert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverAccountAccountIdAlertPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get a list of available alerts The response will contain both active and inactive alerts, but it won&#39;t have MTA alert
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> IserverAccountAccountIdAlertsGet (string accountId)
        {
             ApiResponse<List<Object>> localVarResponse = IserverAccountAccountIdAlertsGetWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of available alerts The response will contain both active and inactive alerts, but it won&#39;t have MTA alert
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > IserverAccountAccountIdAlertsGetWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AlertApi->IserverAccountAccountIdAlertsGet");

            var localVarPath = "/iserver/account/{accountId}/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverAccountAccountIdAlertsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Get a list of available alerts The response will contain both active and inactive alerts, but it won&#39;t have MTA alert
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> IserverAccountAccountIdAlertsGetAsync (string accountId)
        {
             ApiResponse<List<Object>> localVarResponse = await IserverAccountAccountIdAlertsGetAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of available alerts The response will contain both active and inactive alerts, but it won&#39;t have MTA alert
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> IserverAccountAccountIdAlertsGetAsyncWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AlertApi->IserverAccountAccountIdAlertsGet");

            var localVarPath = "/iserver/account/{accountId}/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverAccountAccountIdAlertsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Get details of an alert Use the endpoint /iserver/account/{accountId}/alerts to receive the alert id. The order_id in the response is the alert id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">alert id</param>
        /// <returns>AlertResponse</returns>
        public AlertResponse IserverAccountAlertIdGet (string id)
        {
             ApiResponse<AlertResponse> localVarResponse = IserverAccountAlertIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of an alert Use the endpoint /iserver/account/{accountId}/alerts to receive the alert id. The order_id in the response is the alert id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">alert id</param>
        /// <returns>ApiResponse of AlertResponse</returns>
        public ApiResponse< AlertResponse > IserverAccountAlertIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertApi->IserverAccountAlertIdGet");

            var localVarPath = "/iserver/account/alert/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverAccountAlertIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
        }

        /// <summary>
        /// Get details of an alert Use the endpoint /iserver/account/{accountId}/alerts to receive the alert id. The order_id in the response is the alert id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">alert id</param>
        /// <returns>Task of AlertResponse</returns>
        public async System.Threading.Tasks.Task<AlertResponse> IserverAccountAlertIdGetAsync (string id)
        {
             ApiResponse<AlertResponse> localVarResponse = await IserverAccountAlertIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get details of an alert Use the endpoint /iserver/account/{accountId}/alerts to receive the alert id. The order_id in the response is the alert id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">alert id</param>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertResponse>> IserverAccountAlertIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertApi->IserverAccountAlertIdGet");

            var localVarPath = "/iserver/account/alert/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverAccountAlertIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
        }

        /// <summary>
        /// Get MTA alert Each login user only has one mobile trading assistant (MTA) alert with it&#39;s own unique tool id. The tool id cannot be changed. When modified a new order Id is generated. MTA alerts can not be created or deleted. If you call delete /iserver/account/{accountId}/alert/{alertId}, it will reset MTA to default. See [here](https://www.interactivebrokers.com/en/software/mobileiphonemobile/mobileiphone.htm#monitor/trading-assistant.htm) for more information on MTA alerts. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AlertResponse</returns>
        public AlertResponse IserverAccountMtaGet ()
        {
             ApiResponse<AlertResponse> localVarResponse = IserverAccountMtaGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get MTA alert Each login user only has one mobile trading assistant (MTA) alert with it&#39;s own unique tool id. The tool id cannot be changed. When modified a new order Id is generated. MTA alerts can not be created or deleted. If you call delete /iserver/account/{accountId}/alert/{alertId}, it will reset MTA to default. See [here](https://www.interactivebrokers.com/en/software/mobileiphonemobile/mobileiphone.htm#monitor/trading-assistant.htm) for more information on MTA alerts. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AlertResponse</returns>
        public ApiResponse< AlertResponse > IserverAccountMtaGetWithHttpInfo ()
        {

            var localVarPath = "/iserver/account/mta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverAccountMtaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
        }

        /// <summary>
        /// Get MTA alert Each login user only has one mobile trading assistant (MTA) alert with it&#39;s own unique tool id. The tool id cannot be changed. When modified a new order Id is generated. MTA alerts can not be created or deleted. If you call delete /iserver/account/{accountId}/alert/{alertId}, it will reset MTA to default. See [here](https://www.interactivebrokers.com/en/software/mobileiphonemobile/mobileiphone.htm#monitor/trading-assistant.htm) for more information on MTA alerts. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AlertResponse</returns>
        public async System.Threading.Tasks.Task<AlertResponse> IserverAccountMtaGetAsync ()
        {
             ApiResponse<AlertResponse> localVarResponse = await IserverAccountMtaGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get MTA alert Each login user only has one mobile trading assistant (MTA) alert with it&#39;s own unique tool id. The tool id cannot be changed. When modified a new order Id is generated. MTA alerts can not be created or deleted. If you call delete /iserver/account/{accountId}/alert/{alertId}, it will reset MTA to default. See [here](https://www.interactivebrokers.com/en/software/mobileiphonemobile/mobileiphone.htm#monitor/trading-assistant.htm) for more information on MTA alerts. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AlertResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertResponse>> IserverAccountMtaGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/iserver/account/mta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverAccountMtaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResponse)));
        }

    }
}
