/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;
using DocumentFormat.OpenXml.Wordprocessing;
using Position = IO.Swagger.Model.Position;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfolioApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Account Allocation
        /// </summary>
        /// <remarks>
        /// Information about the account&#39;s portfolio allocation by Asset Class, Industry and Category.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Allocation</returns>
        Allocation PortfolioAccountIdAllocationGet (string accountId);

        /// <summary>
        /// Account Allocation
        /// </summary>
        /// <remarks>
        /// Information about the account&#39;s portfolio allocation by Asset Class, Industry and Category.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>ApiResponse of Allocation</returns>
        ApiResponse<Allocation> PortfolioAccountIdAllocationGetWithHttpInfo (string accountId);
        /// <summary>
        /// Account Ledger
        /// </summary>
        /// <remarks>
        /// Information regarding settled cash, cash balances, etc. in the account&#39;s base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f&#x3D;3185.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Object</returns>
        Object PortfolioAccountIdLedgerGet (string accountId);

        /// <summary>
        /// Account Ledger
        /// </summary>
        /// <remarks>
        /// Information regarding settled cash, cash balances, etc. in the account&#39;s base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f&#x3D;3185.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PortfolioAccountIdLedgerGetWithHttpInfo (string accountId);
        /// <summary>
        /// Account Information
        /// </summary>
        /// <remarks>
        /// Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Accounts</returns>
        Accounts PortfolioAccountIdMetaGet (string accountId);

        /// <summary>
        /// Account Information
        /// </summary>
        /// <remarks>
        /// Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>ApiResponse of Accounts</returns>
        ApiResponse<Accounts> PortfolioAccountIdMetaGetWithHttpInfo (string accountId);
        /// <summary>
        /// Position by Conid
        /// </summary>
        /// <remarks>
        /// Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="conid">contract id</param>
        /// <returns>Position</returns>
        Position PortfolioAccountIdPositionConidGet (string accountId, int? conid);

        /// <summary>
        /// Position by Conid
        /// </summary>
        /// <remarks>
        /// Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="conid">contract id</param>
        /// <returns>ApiResponse of Position</returns>
        ApiResponse<Position> PortfolioAccountIdPositionConidGetWithHttpInfo (string accountId, int? conid);
        /// <summary>
        /// Invalidates the backend cache of the Portfolio
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Object</returns>
        Object PortfolioAccountIdPositionsInvalidatePost (string accountId);

        /// <summary>
        /// Invalidates the backend cache of the Portfolio
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PortfolioAccountIdPositionsInvalidatePostWithHttpInfo (string accountId);
        /// <summary>
        /// Portfolio Positions
        /// </summary>
        /// <remarks>
        /// Returns a list of positions for the given account. The endpoint supports paging, page&#39;s default size is 30 positions. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="pageId">page id</param>
        /// <param name="model">optional (optional)</param>
        /// <param name="sort">declare the table to be sorted by which column (optional)</param>
        /// <param name="direction">in which order, a means ascending - d means descending (optional)</param>
        /// <param name="period">period for pnl column, can be 1D, 7D, 1M... (optional)</param>
        /// <returns>Position</returns>
        Position PortfolioAccountIdPositionsPageIdGet (string accountId, string pageId, string model = null, string sort = null, string direction = null, string period = null);

        /// <summary>
        /// Portfolio Positions
        /// </summary>
        /// <remarks>
        /// Returns a list of positions for the given account. The endpoint supports paging, page&#39;s default size is 30 positions. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="pageId">page id</param>
        /// <param name="model">optional (optional)</param>
        /// <param name="sort">declare the table to be sorted by which column (optional)</param>
        /// <param name="direction">in which order, a means ascending - d means descending (optional)</param>
        /// <param name="period">period for pnl column, can be 1D, 7D, 1M... (optional)</param>
        /// <returns>ApiResponse of Position</returns>
        ApiResponse<Position> PortfolioAccountIdPositionsPageIdGetWithHttpInfo (string accountId, string pageId, string model = null, string sort = null, string direction = null, string period = null);
        /// <summary>
        /// Account Summary
        /// </summary>
        /// <remarks>
        /// Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Object</returns>
        Object PortfolioAccountIdSummaryGet (string accountId);

        /// <summary>
        /// Account Summary
        /// </summary>
        /// <remarks>
        /// Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PortfolioAccountIdSummaryGetWithHttpInfo (string accountId);
        /// <summary>
        /// Portfolio Accounts
        /// </summary>
        /// <remarks>
        /// In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Accounts</returns>
        Accounts PortfolioAccountsGet ();

        /// <summary>
        /// Portfolio Accounts
        /// </summary>
        /// <remarks>
        /// In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Accounts</returns>
        ApiResponse<Accounts> PortfolioAccountsGetWithHttpInfo ();
        /// <summary>
        /// Account Alloction (All Accounts)
        /// </summary>
        /// <remarks>
        /// Similar to /portfolio/{accountId}/allocation but returns a consolidated view of of all the accounts returned by /portfolio/accounts. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">accounts info</param>
        /// <returns>Allocation</returns>
        Allocation PortfolioAllocationPost (Body body);

        /// <summary>
        /// Account Alloction (All Accounts)
        /// </summary>
        /// <remarks>
        /// Similar to /portfolio/{accountId}/allocation but returns a consolidated view of of all the accounts returned by /portfolio/accounts. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">accounts info</param>
        /// <returns>ApiResponse of Allocation</returns>
        ApiResponse<Allocation> PortfolioAllocationPostWithHttpInfo (Body body);
        /// <summary>
        /// Positions by Conid
        /// </summary>
        /// <remarks>
        /// Returns an object of all positions matching the conid for all the selected accounts. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Object</returns>
        Object PortfolioPositionsConidGet (int? conid);

        /// <summary>
        /// Positions by Conid
        /// </summary>
        /// <remarks>
        /// Returns an object of all positions matching the conid for all the selected accounts. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PortfolioPositionsConidGetWithHttpInfo (int? conid);
        /// <summary>
        /// List of Sub-Accounts
        /// </summary>
        /// <remarks>
        /// Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Account</returns>
        Account PortfolioSubaccountsGet ();

        /// <summary>
        /// List of Sub-Accounts
        /// </summary>
        /// <remarks>
        /// Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Account</returns>
        ApiResponse<Account> PortfolioSubaccountsGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Account Allocation
        /// </summary>
        /// <remarks>
        /// Information about the account&#39;s portfolio allocation by Asset Class, Industry and Category.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of Allocation</returns>
        System.Threading.Tasks.Task<Allocation> PortfolioAccountIdAllocationGetAsync (string accountId);

        /// <summary>
        /// Account Allocation
        /// </summary>
        /// <remarks>
        /// Information about the account&#39;s portfolio allocation by Asset Class, Industry and Category.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocation>> PortfolioAccountIdAllocationGetAsyncWithHttpInfo (string accountId);
        /// <summary>
        /// Account Ledger
        /// </summary>
        /// <remarks>
        /// Information regarding settled cash, cash balances, etc. in the account&#39;s base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f&#x3D;3185.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PortfolioAccountIdLedgerGetAsync (string accountId);

        /// <summary>
        /// Account Ledger
        /// </summary>
        /// <remarks>
        /// Information regarding settled cash, cash balances, etc. in the account&#39;s base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f&#x3D;3185.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortfolioAccountIdLedgerGetAsyncWithHttpInfo (string accountId);
        /// <summary>
        /// Account Information
        /// </summary>
        /// <remarks>
        /// Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of Accounts</returns>
        System.Threading.Tasks.Task<Accounts> PortfolioAccountIdMetaGetAsync (string accountId);

        /// <summary>
        /// Account Information
        /// </summary>
        /// <remarks>
        /// Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Accounts>> PortfolioAccountIdMetaGetAsyncWithHttpInfo (string accountId);
        /// <summary>
        /// Position by Conid
        /// </summary>
        /// <remarks>
        /// Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="conid">contract id</param>
        /// <returns>Task of Position</returns>
        System.Threading.Tasks.Task<Position> PortfolioAccountIdPositionConidGetAsync (string accountId, int? conid);

        /// <summary>
        /// Position by Conid
        /// </summary>
        /// <remarks>
        /// Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="conid">contract id</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        System.Threading.Tasks.Task<ApiResponse<Position>> PortfolioAccountIdPositionConidGetAsyncWithHttpInfo (string accountId, int? conid);
        /// <summary>
        /// Invalidates the backend cache of the Portfolio
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PortfolioAccountIdPositionsInvalidatePostAsync (string accountId);

        /// <summary>
        /// Invalidates the backend cache of the Portfolio
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortfolioAccountIdPositionsInvalidatePostAsyncWithHttpInfo (string accountId);
        /// <summary>
        /// Portfolio Positions
        /// </summary>
        /// <remarks>
        /// Returns a list of positions for the given account. The endpoint supports paging, page&#39;s default size is 30 positions. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="pageId">page id</param>
        /// <param name="model">optional (optional)</param>
        /// <param name="sort">declare the table to be sorted by which column (optional)</param>
        /// <param name="direction">in which order, a means ascending - d means descending (optional)</param>
        /// <param name="period">period for pnl column, can be 1D, 7D, 1M... (optional)</param>
        /// <returns>Task of Position</returns>
        System.Threading.Tasks.Task<Position> PortfolioAccountIdPositionsPageIdGetAsync (string accountId, string pageId, string model = null, string sort = null, string direction = null, string period = null);

        /// <summary>
        /// Portfolio Positions
        /// </summary>
        /// <remarks>
        /// Returns a list of positions for the given account. The endpoint supports paging, page&#39;s default size is 30 positions. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="pageId">page id</param>
        /// <param name="model">optional (optional)</param>
        /// <param name="sort">declare the table to be sorted by which column (optional)</param>
        /// <param name="direction">in which order, a means ascending - d means descending (optional)</param>
        /// <param name="period">period for pnl column, can be 1D, 7D, 1M... (optional)</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        System.Threading.Tasks.Task<ApiResponse<Position>> PortfolioAccountIdPositionsPageIdGetAsyncWithHttpInfo (string accountId, string pageId, string model = null, string sort = null, string direction = null, string period = null);
        /// <summary>
        /// Account Summary
        /// </summary>
        /// <remarks>
        /// Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PortfolioAccountIdSummaryGetAsync (string accountId);

        /// <summary>
        /// Account Summary
        /// </summary>
        /// <remarks>
        /// Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortfolioAccountIdSummaryGetAsyncWithHttpInfo (string accountId);
        /// <summary>
        /// Portfolio Accounts
        /// </summary>
        /// <remarks>
        /// In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Accounts</returns>
        System.Threading.Tasks.Task<Accounts> PortfolioAccountsGetAsync ();

        /// <summary>
        /// Portfolio Accounts
        /// </summary>
        /// <remarks>
        /// In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Accounts>> PortfolioAccountsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Account Alloction (All Accounts)
        /// </summary>
        /// <remarks>
        /// Similar to /portfolio/{accountId}/allocation but returns a consolidated view of of all the accounts returned by /portfolio/accounts. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">accounts info</param>
        /// <returns>Task of Allocation</returns>
        System.Threading.Tasks.Task<Allocation> PortfolioAllocationPostAsync (Body body);

        /// <summary>
        /// Account Alloction (All Accounts)
        /// </summary>
        /// <remarks>
        /// Similar to /portfolio/{accountId}/allocation but returns a consolidated view of of all the accounts returned by /portfolio/accounts. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">accounts info</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocation>> PortfolioAllocationPostAsyncWithHttpInfo (Body body);
        /// <summary>
        /// Positions by Conid
        /// </summary>
        /// <remarks>
        /// Returns an object of all positions matching the conid for all the selected accounts. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PortfolioPositionsConidGetAsync (int? conid);

        /// <summary>
        /// Positions by Conid
        /// </summary>
        /// <remarks>
        /// Returns an object of all positions matching the conid for all the selected accounts. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortfolioPositionsConidGetAsyncWithHttpInfo (int? conid);
        /// <summary>
        /// List of Sub-Accounts
        /// </summary>
        /// <remarks>
        /// Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Account</returns>
        System.Threading.Tasks.Task<Account> PortfolioSubaccountsGetAsync ();

        /// <summary>
        /// List of Sub-Accounts
        /// </summary>
        /// <remarks>
        /// Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Account)</returns>
        System.Threading.Tasks.Task<ApiResponse<Account>> PortfolioSubaccountsGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PortfolioApi : IPortfolioApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PortfolioApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PortfolioApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Account Allocation Information about the account&#39;s portfolio allocation by Asset Class, Industry and Category.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Allocation</returns>
        public Allocation PortfolioAccountIdAllocationGet (string accountId)
        {
             ApiResponse<Allocation> localVarResponse = PortfolioAccountIdAllocationGetWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Account Allocation Information about the account&#39;s portfolio allocation by Asset Class, Industry and Category.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>ApiResponse of Allocation</returns>
        public ApiResponse< Allocation > PortfolioAccountIdAllocationGetWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PortfolioApi->PortfolioAccountIdAllocationGet");

            var localVarPath = "/portfolio/{accountId}/allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountIdAllocationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Allocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Allocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Allocation)));
        }

        /// <summary>
        /// Account Allocation Information about the account&#39;s portfolio allocation by Asset Class, Industry and Category.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of Allocation</returns>
        public async System.Threading.Tasks.Task<Allocation> PortfolioAccountIdAllocationGetAsync (string accountId)
        {
             ApiResponse<Allocation> localVarResponse = await PortfolioAccountIdAllocationGetAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Account Allocation Information about the account&#39;s portfolio allocation by Asset Class, Industry and Category.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Allocation>> PortfolioAccountIdAllocationGetAsyncWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PortfolioApi->PortfolioAccountIdAllocationGet");

            var localVarPath = "/portfolio/{accountId}/allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountIdAllocationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Allocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Allocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Allocation)));
        }

        /// <summary>
        /// Account Ledger Information regarding settled cash, cash balances, etc. in the account&#39;s base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f&#x3D;3185.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Object</returns>
        public Object PortfolioAccountIdLedgerGet (string accountId)
        {
             ApiResponse<Object> localVarResponse = PortfolioAccountIdLedgerGetWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Account Ledger Information regarding settled cash, cash balances, etc. in the account&#39;s base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f&#x3D;3185.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PortfolioAccountIdLedgerGetWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PortfolioApi->PortfolioAccountIdLedgerGet");

            var localVarPath = "/portfolio/{accountId}/ledger";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountIdLedgerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Account Ledger Information regarding settled cash, cash balances, etc. in the account&#39;s base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f&#x3D;3185.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PortfolioAccountIdLedgerGetAsync (string accountId)
        {
             ApiResponse<Object> localVarResponse = await PortfolioAccountIdLedgerGetAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Account Ledger Information regarding settled cash, cash balances, etc. in the account&#39;s base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f&#x3D;3185.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortfolioAccountIdLedgerGetAsyncWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PortfolioApi->PortfolioAccountIdLedgerGet");

            var localVarPath = "/portfolio/{accountId}/ledger";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountIdLedgerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Account Information Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Accounts</returns>
        public Accounts PortfolioAccountIdMetaGet (string accountId)
        {
             ApiResponse<Accounts> localVarResponse = PortfolioAccountIdMetaGetWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Account Information Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>ApiResponse of Accounts</returns>
        public ApiResponse< Accounts > PortfolioAccountIdMetaGetWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PortfolioApi->PortfolioAccountIdMetaGet");

            var localVarPath = "/portfolio/{accountId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountIdMetaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Accounts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Accounts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Accounts)));
        }

        /// <summary>
        /// Account Information Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of Accounts</returns>
        public async System.Threading.Tasks.Task<Accounts> PortfolioAccountIdMetaGetAsync (string accountId)
        {
             ApiResponse<Accounts> localVarResponse = await PortfolioAccountIdMetaGetAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Account Information Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Accounts>> PortfolioAccountIdMetaGetAsyncWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PortfolioApi->PortfolioAccountIdMetaGet");

            var localVarPath = "/portfolio/{accountId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountIdMetaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Accounts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Accounts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Accounts)));
        }

        /// <summary>
        /// Position by Conid Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="conid">contract id</param>
        /// <returns>Position</returns>
        public Position PortfolioAccountIdPositionConidGet (string accountId, int? conid)
        {
             ApiResponse<Position> localVarResponse = PortfolioAccountIdPositionConidGetWithHttpInfo(accountId, conid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Position by Conid Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="conid">contract id</param>
        /// <returns>ApiResponse of Position</returns>
        public ApiResponse< Position > PortfolioAccountIdPositionConidGetWithHttpInfo (string accountId, int? conid)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PortfolioApi->PortfolioAccountIdPositionConidGet");
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling PortfolioApi->PortfolioAccountIdPositionConidGet");

            var localVarPath = "/portfolio/{accountId}/position/{conid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conid != null) localVarPathParams.Add("conid", this.Configuration.ApiClient.ParameterToString(conid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountIdPositionConidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Position>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Position) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Position)));
        }

        /// <summary>
        /// Position by Conid Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="conid">contract id</param>
        /// <returns>Task of Position</returns>
        public async System.Threading.Tasks.Task<Position> PortfolioAccountIdPositionConidGetAsync (string accountId, int? conid)
        {
             ApiResponse<Position> localVarResponse = await PortfolioAccountIdPositionConidGetAsyncWithHttpInfo(accountId, conid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Position by Conid Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="conid">contract id</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Position>> PortfolioAccountIdPositionConidGetAsyncWithHttpInfo (string accountId, int? conid)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PortfolioApi->PortfolioAccountIdPositionConidGet");
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling PortfolioApi->PortfolioAccountIdPositionConidGet");

            var localVarPath = "/portfolio/{accountId}/position/{conid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conid != null) localVarPathParams.Add("conid", this.Configuration.ApiClient.ParameterToString(conid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountIdPositionConidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Position>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Position) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Position)));
        }

        /// <summary>
        /// Invalidates the backend cache of the Portfolio 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Object</returns>
        public Object PortfolioAccountIdPositionsInvalidatePost (string accountId)
        {
             ApiResponse<Object> localVarResponse = PortfolioAccountIdPositionsInvalidatePostWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Invalidates the backend cache of the Portfolio 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PortfolioAccountIdPositionsInvalidatePostWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PortfolioApi->PortfolioAccountIdPositionsInvalidatePost");

            var localVarPath = "/portfolio/{accountId}/positions/invalidate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountIdPositionsInvalidatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Invalidates the backend cache of the Portfolio 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PortfolioAccountIdPositionsInvalidatePostAsync (string accountId)
        {
             ApiResponse<Object> localVarResponse = await PortfolioAccountIdPositionsInvalidatePostAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Invalidates the backend cache of the Portfolio 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortfolioAccountIdPositionsInvalidatePostAsyncWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PortfolioApi->PortfolioAccountIdPositionsInvalidatePost");

            var localVarPath = "/portfolio/{accountId}/positions/invalidate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountIdPositionsInvalidatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Portfolio Positions Returns a list of positions for the given account. The endpoint supports paging, page&#39;s default size is 30 positions. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="pageId">page id</param>
        /// <param name="model">optional (optional)</param>
        /// <param name="sort">declare the table to be sorted by which column (optional)</param>
        /// <param name="direction">in which order, a means ascending - d means descending (optional)</param>
        /// <param name="period">period for pnl column, can be 1D, 7D, 1M... (optional)</param>
        /// <returns>Position</returns>
        public Position PortfolioAccountIdPositionsPageIdGet (string accountId, string pageId, string model = null, string sort = null, string direction = null, string period = null)
        {
             ApiResponse<Position> localVarResponse = PortfolioAccountIdPositionsPageIdGetWithHttpInfo(accountId, pageId, model, sort, direction, period);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Portfolio Positions Returns a list of positions for the given account. The endpoint supports paging, page&#39;s default size is 30 positions. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="pageId">page id</param>
        /// <param name="model">optional (optional)</param>
        /// <param name="sort">declare the table to be sorted by which column (optional)</param>
        /// <param name="direction">in which order, a means ascending - d means descending (optional)</param>
        /// <param name="period">period for pnl column, can be 1D, 7D, 1M... (optional)</param>
        /// <returns>ApiResponse of Position</returns>
        public ApiResponse< Position > PortfolioAccountIdPositionsPageIdGetWithHttpInfo (string accountId, string pageId, string model = null, string sort = null, string direction = null, string period = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PortfolioApi->PortfolioAccountIdPositionsPageIdGet");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling PortfolioApi->PortfolioAccountIdPositionsPageIdGet");

            var localVarPath = "/portfolio/{accountId}/positions/{pageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (pageId != null) localVarPathParams.Add("pageId", this.Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (model != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "model", model)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountIdPositionsPageIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Position>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Position) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Position)));
        }

        /// <summary>
        /// Portfolio Positions Returns a list of positions for the given account. The endpoint supports paging, page&#39;s default size is 30 positions. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="pageId">page id</param>
        /// <param name="model">optional (optional)</param>
        /// <param name="sort">declare the table to be sorted by which column (optional)</param>
        /// <param name="direction">in which order, a means ascending - d means descending (optional)</param>
        /// <param name="period">period for pnl column, can be 1D, 7D, 1M... (optional)</param>
        /// <returns>Task of Position</returns>
        public async System.Threading.Tasks.Task<Position> PortfolioAccountIdPositionsPageIdGetAsync (string accountId, string pageId, string model = null, string sort = null, string direction = null, string period = null)
        {
             ApiResponse<Position> localVarResponse = await PortfolioAccountIdPositionsPageIdGetAsyncWithHttpInfo(accountId, pageId, model, sort, direction, period);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Portfolio Positions Returns a list of positions for the given account. The endpoint supports paging, page&#39;s default size is 30 positions. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <param name="pageId">page id</param>
        /// <param name="model">optional (optional)</param>
        /// <param name="sort">declare the table to be sorted by which column (optional)</param>
        /// <param name="direction">in which order, a means ascending - d means descending (optional)</param>
        /// <param name="period">period for pnl column, can be 1D, 7D, 1M... (optional)</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Position>> PortfolioAccountIdPositionsPageIdGetAsyncWithHttpInfo (string accountId, string pageId, string model = null, string sort = null, string direction = null, string period = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PortfolioApi->PortfolioAccountIdPositionsPageIdGet");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling PortfolioApi->PortfolioAccountIdPositionsPageIdGet");

            var localVarPath = "/portfolio/{accountId}/positions/{pageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (pageId != null) localVarPathParams.Add("pageId", this.Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (model != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "model", model)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountIdPositionsPageIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Position>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Position) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Position)));
        }

        /// <summary>
        /// Account Summary Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Object</returns>
        public Object PortfolioAccountIdSummaryGet (string accountId)
        {
             ApiResponse<Object> localVarResponse = PortfolioAccountIdSummaryGetWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Account Summary Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PortfolioAccountIdSummaryGetWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PortfolioApi->PortfolioAccountIdSummaryGet");

            var localVarPath = "/portfolio/{accountId}/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountIdSummaryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Account Summary Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PortfolioAccountIdSummaryGetAsync (string accountId)
        {
             ApiResponse<Object> localVarResponse = await PortfolioAccountIdSummaryGetAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Account Summary Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortfolioAccountIdSummaryGetAsyncWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PortfolioApi->PortfolioAccountIdSummaryGet");

            var localVarPath = "/portfolio/{accountId}/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountIdSummaryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Portfolio Accounts In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Accounts</returns>
        public Accounts PortfolioAccountsGet ()
        {
             ApiResponse<Accounts> localVarResponse = PortfolioAccountsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Portfolio Accounts In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Accounts</returns>
        public ApiResponse< Accounts > PortfolioAccountsGetWithHttpInfo ()
        {

            var localVarPath = "/portfolio/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Accounts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Accounts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Accounts)));
        }

        /// <summary>
        /// Portfolio Accounts In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Accounts</returns>
        public async System.Threading.Tasks.Task<Accounts> PortfolioAccountsGetAsync ()
        {
             ApiResponse<Accounts> localVarResponse = await PortfolioAccountsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Portfolio Accounts In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Accounts>> PortfolioAccountsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/portfolio/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Accounts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Accounts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Accounts)));
        }

        /// <summary>
        /// Account Alloction (All Accounts) Similar to /portfolio/{accountId}/allocation but returns a consolidated view of of all the accounts returned by /portfolio/accounts. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">accounts info</param>
        /// <returns>Allocation</returns>
        public Allocation PortfolioAllocationPost (Body body)
        {
             ApiResponse<Allocation> localVarResponse = PortfolioAllocationPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Account Alloction (All Accounts) Similar to /portfolio/{accountId}/allocation but returns a consolidated view of of all the accounts returned by /portfolio/accounts. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">accounts info</param>
        /// <returns>ApiResponse of Allocation</returns>
        public ApiResponse< Allocation > PortfolioAllocationPostWithHttpInfo (Body body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PortfolioApi->PortfolioAllocationPost");

            var localVarPath = "/portfolio/allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAllocationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Allocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Allocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Allocation)));
        }

        /// <summary>
        /// Account Alloction (All Accounts) Similar to /portfolio/{accountId}/allocation but returns a consolidated view of of all the accounts returned by /portfolio/accounts. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">accounts info</param>
        /// <returns>Task of Allocation</returns>
        public async System.Threading.Tasks.Task<Allocation> PortfolioAllocationPostAsync (Body body)
        {
             ApiResponse<Allocation> localVarResponse = await PortfolioAllocationPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Account Alloction (All Accounts) Similar to /portfolio/{accountId}/allocation but returns a consolidated view of of all the accounts returned by /portfolio/accounts. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">accounts info</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Allocation>> PortfolioAllocationPostAsyncWithHttpInfo (Body body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PortfolioApi->PortfolioAllocationPost");

            var localVarPath = "/portfolio/allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioAllocationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Allocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Allocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Allocation)));
        }

        /// <summary>
        /// Positions by Conid Returns an object of all positions matching the conid for all the selected accounts. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Object</returns>
        public Object PortfolioPositionsConidGet (int? conid)
        {
             ApiResponse<Object> localVarResponse = PortfolioPositionsConidGetWithHttpInfo(conid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Positions by Conid Returns an object of all positions matching the conid for all the selected accounts. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PortfolioPositionsConidGetWithHttpInfo (int? conid)
        {
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling PortfolioApi->PortfolioPositionsConidGet");

            var localVarPath = "/portfolio/positions/{conid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conid != null) localVarPathParams.Add("conid", this.Configuration.ApiClient.ParameterToString(conid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioPositionsConidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Positions by Conid Returns an object of all positions matching the conid for all the selected accounts. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PortfolioPositionsConidGetAsync (int? conid)
        {
             ApiResponse<Object> localVarResponse = await PortfolioPositionsConidGetAsyncWithHttpInfo(conid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Positions by Conid Returns an object of all positions matching the conid for all the selected accounts. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortfolioPositionsConidGetAsyncWithHttpInfo (int? conid)
        {
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling PortfolioApi->PortfolioPositionsConidGet");

            var localVarPath = "/portfolio/positions/{conid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conid != null) localVarPathParams.Add("conid", this.Configuration.ApiClient.ParameterToString(conid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioPositionsConidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// List of Sub-Accounts Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Account</returns>
        public Account PortfolioSubaccountsGet ()
        {
             ApiResponse<Account> localVarResponse = PortfolioSubaccountsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of Sub-Accounts Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Account</returns>
        public ApiResponse< Account > PortfolioSubaccountsGetWithHttpInfo ()
        {

            var localVarPath = "/portfolio/subaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioSubaccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Account) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Account)));
        }

        /// <summary>
        /// List of Sub-Accounts Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Account</returns>
        public async System.Threading.Tasks.Task<Account> PortfolioSubaccountsGetAsync ()
        {
             ApiResponse<Account> localVarResponse = await PortfolioSubaccountsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of Sub-Accounts Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Account)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Account>> PortfolioSubaccountsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/portfolio/subaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioSubaccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Account) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Account)));
        }

    }
}
