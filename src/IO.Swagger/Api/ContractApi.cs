/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;
using DocumentFormat.OpenXml.Wordprocessing;
using DocumentFormat.OpenXml.Drawing.Charts;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContractApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Info and Rules
        /// </summary>
        /// <remarks>
        /// Returns trading related rules and info for contract
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">IBKR contract identifier</param>
        /// <param name="isBuy">Side of the market rules apply too. Set to true for Buy Orders, set to false for Sell Orders</param>
        /// <returns>Object</returns>
        Object IserverContractConidInfoAndRulesGet (string conid, bool? isBuy);

        /// <summary>
        /// Info and Rules
        /// </summary>
        /// <remarks>
        /// Returns trading related rules and info for contract
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">IBKR contract identifier</param>
        /// <param name="isBuy">Side of the market rules apply too. Set to true for Buy Orders, set to false for Sell Orders</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IserverContractConidInfoAndRulesGetWithHttpInfo (string conid, bool? isBuy);
        /// <summary>
        /// Contract Details
        /// </summary>
        /// <remarks>
        /// Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an order
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Contract</returns>
        Contract IserverContractConidInfoGet (string conid);

        /// <summary>
        /// Contract Details
        /// </summary>
        /// <remarks>
        /// Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an order
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>ApiResponse of Contract</returns>
        ApiResponse<Contract> IserverContractConidInfoGetWithHttpInfo (string conid);
        /// <summary>
        /// Secdef Info
        /// </summary>
        /// <remarks>
        /// Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price for Options/Warrants use \&quot;/iserver/secdef/strikes\&quot; endpoint. Must call /secdef/search for the underlying contract first.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">underlying contract id</param>
        /// <param name="sectype">FUT/OPT/WAR/CASH/CFD</param>
        /// <param name="month">contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00 (optional)</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <param name="strike">optional, only required for OPT/WAR (optional)</param>
        /// <param name="right">C for call, P for put (optional)</param>
        /// <returns>Object</returns>
        Object IserverSecdefInfoGet (string conid, string sectype, string month = null, string exchange = null, string strike = null, string right = null);

        /// <summary>
        /// Secdef Info
        /// </summary>
        /// <remarks>
        /// Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price for Options/Warrants use \&quot;/iserver/secdef/strikes\&quot; endpoint. Must call /secdef/search for the underlying contract first.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">underlying contract id</param>
        /// <param name="sectype">FUT/OPT/WAR/CASH/CFD</param>
        /// <param name="month">contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00 (optional)</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <param name="strike">optional, only required for OPT/WAR (optional)</param>
        /// <param name="right">C for call, P for put (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IserverSecdefInfoGetWithHttpInfo (string conid, string sectype, string month = null, string exchange = null, string strike = null, string right = null);
        /// <summary>
        /// Search by Symbol or Name
        /// </summary>
        /// <remarks>
        /// Search by underlying or company name. Relays back what derivative contract(s) it has. This endpoint must be called before using /secdef/info
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol or Company Name to be searched</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> IserverSecdefSearchPost (Symbol symbol);

        /// <summary>
        /// Search by Symbol or Name
        /// </summary>
        /// <remarks>
        /// Search by underlying or company name. Relays back what derivative contract(s) it has. This endpoint must be called before using /secdef/info
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol or Company Name to be searched</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> IserverSecdefSearchPostWithHttpInfo (Symbol symbol);
        /// <summary>
        /// Search Strikes
        /// </summary>
        /// <remarks>
        /// Query strikes for Options/Warrants. For available contract months and exchanges use \&quot;/iserver/secdef/search\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="sectype">OPT/WAR</param>
        /// <param name="month">contract month</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <returns>Object</returns>
        Object IserverSecdefStrikesGet (string conid, string sectype, string month, string exchange = null);

        /// <summary>
        /// Search Strikes
        /// </summary>
        /// <remarks>
        /// Query strikes for Options/Warrants. For available contract months and exchanges use \&quot;/iserver/secdef/search\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="sectype">OPT/WAR</param>
        /// <param name="month">contract month</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IserverSecdefStrikesGetWithHttpInfo (string conid, string sectype, string month, string exchange = null);
        /// <summary>
        /// Security Futures by Symbol
        /// </summary>
        /// <remarks>
        /// Returns a list of non-expired future contracts for given symbol(s)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of case-sensitive symbols separated by comma</param>
        /// <returns>Object</returns>
        Object TrsrvFuturesGet (string symbols);

        /// <summary>
        /// Security Futures by Symbol
        /// </summary>
        /// <remarks>
        /// Returns a list of non-expired future contracts for given symbol(s)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of case-sensitive symbols separated by comma</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TrsrvFuturesGetWithHttpInfo (string symbols);
        /// <summary>
        /// Secdef by Conid
        /// </summary>
        /// <remarks>
        /// Returns a list of security definitions for the given conids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request body</param>
        /// <returns>Secdef</returns>
        Secdef TrsrvSecdefPost (Body body);

        /// <summary>
        /// Secdef by Conid
        /// </summary>
        /// <remarks>
        /// Returns a list of security definitions for the given conids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request body</param>
        /// <returns>ApiResponse of Secdef</returns>
        ApiResponse<Secdef> TrsrvSecdefPostWithHttpInfo (Body body);
        /// <summary>
        /// Get trading schedule for symbol
        /// </summary>
        /// <remarks>
        /// Returns the trading schedule up to a month for the requested contract
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetClass">specify the asset class of the contract. Available values- - Stock: STK, Option: OPT, Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND, Bond: BND, Inter-Commodity Spreads: ICS </param>
        /// <param name="symbol">Underlying Symbol for specified contract, for example &#39;AAPL&#39; for US Stock - Apple Inc.</param>
        /// <param name="exchange">Native exchange for contract, for example &#39;NASDAQ&#39; for US Stock - Apple Inc. (optional)</param>
        /// <returns>Object</returns>
        Object TrsrvSecdefScheduleGet (string assetClass, string symbol, string exchange = null);

        /// <summary>
        /// Get trading schedule for symbol
        /// </summary>
        /// <remarks>
        /// Returns the trading schedule up to a month for the requested contract
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetClass">specify the asset class of the contract. Available values- - Stock: STK, Option: OPT, Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND, Bond: BND, Inter-Commodity Spreads: ICS </param>
        /// <param name="symbol">Underlying Symbol for specified contract, for example &#39;AAPL&#39; for US Stock - Apple Inc.</param>
        /// <param name="exchange">Native exchange for contract, for example &#39;NASDAQ&#39; for US Stock - Apple Inc. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TrsrvSecdefScheduleGetWithHttpInfo (string assetClass, string symbol, string exchange = null);
        /// <summary>
        /// Security Stocks by Symbol
        /// </summary>
        /// <remarks>
        /// Returns an object contains all stock contracts for given symbol(s)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of upper-sensitive symbols separated by comma</param>
        /// <returns>Object</returns>
        Object TrsrvStocksGet (string symbols);

        /// <summary>
        /// Security Stocks by Symbol
        /// </summary>
        /// <remarks>
        /// Returns an object contains all stock contracts for given symbol(s)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of upper-sensitive symbols separated by comma</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TrsrvStocksGetWithHttpInfo (string symbols);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Info and Rules
        /// </summary>
        /// <remarks>
        /// Returns trading related rules and info for contract
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">IBKR contract identifier</param>
        /// <param name="isBuy">Side of the market rules apply too. Set to true for Buy Orders, set to false for Sell Orders</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IserverContractConidInfoAndRulesGetAsync (string conid, bool? isBuy);

        /// <summary>
        /// Info and Rules
        /// </summary>
        /// <remarks>
        /// Returns trading related rules and info for contract
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">IBKR contract identifier</param>
        /// <param name="isBuy">Side of the market rules apply too. Set to true for Buy Orders, set to false for Sell Orders</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IserverContractConidInfoAndRulesGetAsyncWithHttpInfo (string conid, bool? isBuy);
        /// <summary>
        /// Contract Details
        /// </summary>
        /// <remarks>
        /// Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an order
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Task of Contract</returns>
        System.Threading.Tasks.Task<Contract> IserverContractConidInfoGetAsync (string conid);

        /// <summary>
        /// Contract Details
        /// </summary>
        /// <remarks>
        /// Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an order
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contract>> IserverContractConidInfoGetAsyncWithHttpInfo (string conid);
        /// <summary>
        /// Secdef Info
        /// </summary>
        /// <remarks>
        /// Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price for Options/Warrants use \&quot;/iserver/secdef/strikes\&quot; endpoint. Must call /secdef/search for the underlying contract first.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">underlying contract id</param>
        /// <param name="sectype">FUT/OPT/WAR/CASH/CFD</param>
        /// <param name="month">contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00 (optional)</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <param name="strike">optional, only required for OPT/WAR (optional)</param>
        /// <param name="right">C for call, P for put (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IserverSecdefInfoGetAsync (string conid, string sectype, string month = null, string exchange = null, string strike = null, string right = null);

        /// <summary>
        /// Secdef Info
        /// </summary>
        /// <remarks>
        /// Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price for Options/Warrants use \&quot;/iserver/secdef/strikes\&quot; endpoint. Must call /secdef/search for the underlying contract first.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">underlying contract id</param>
        /// <param name="sectype">FUT/OPT/WAR/CASH/CFD</param>
        /// <param name="month">contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00 (optional)</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <param name="strike">optional, only required for OPT/WAR (optional)</param>
        /// <param name="right">C for call, P for put (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IserverSecdefInfoGetAsyncWithHttpInfo (string conid, string sectype, string month = null, string exchange = null, string strike = null, string right = null);
        /// <summary>
        /// Search by Symbol or Name
        /// </summary>
        /// <remarks>
        /// Search by underlying or company name. Relays back what derivative contract(s) it has. This endpoint must be called before using /secdef/info
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol or Company Name to be searched</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> IserverSecdefSearchPostAsync (Symbol symbol);

        /// <summary>
        /// Search by Symbol or Name
        /// </summary>
        /// <remarks>
        /// Search by underlying or company name. Relays back what derivative contract(s) it has. This endpoint must be called before using /secdef/info
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol or Company Name to be searched</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> IserverSecdefSearchPostAsyncWithHttpInfo (Symbol symbol);
        /// <summary>
        /// Search Strikes
        /// </summary>
        /// <remarks>
        /// Query strikes for Options/Warrants. For available contract months and exchanges use \&quot;/iserver/secdef/search\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="sectype">OPT/WAR</param>
        /// <param name="month">contract month</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IserverSecdefStrikesGetAsync (string conid, string sectype, string month, string exchange = null);

        /// <summary>
        /// Search Strikes
        /// </summary>
        /// <remarks>
        /// Query strikes for Options/Warrants. For available contract months and exchanges use \&quot;/iserver/secdef/search\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="sectype">OPT/WAR</param>
        /// <param name="month">contract month</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IserverSecdefStrikesGetAsyncWithHttpInfo (string conid, string sectype, string month, string exchange = null);
        /// <summary>
        /// Security Futures by Symbol
        /// </summary>
        /// <remarks>
        /// Returns a list of non-expired future contracts for given symbol(s)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of case-sensitive symbols separated by comma</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TrsrvFuturesGetAsync (string symbols);

        /// <summary>
        /// Security Futures by Symbol
        /// </summary>
        /// <remarks>
        /// Returns a list of non-expired future contracts for given symbol(s)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of case-sensitive symbols separated by comma</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrsrvFuturesGetAsyncWithHttpInfo (string symbols);
        /// <summary>
        /// Secdef by Conid
        /// </summary>
        /// <remarks>
        /// Returns a list of security definitions for the given conids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request body</param>
        /// <returns>Task of Secdef</returns>
        System.Threading.Tasks.Task<Secdef> TrsrvSecdefPostAsync (Body body);

        /// <summary>
        /// Secdef by Conid
        /// </summary>
        /// <remarks>
        /// Returns a list of security definitions for the given conids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request body</param>
        /// <returns>Task of ApiResponse (Secdef)</returns>
        System.Threading.Tasks.Task<ApiResponse<Secdef>> TrsrvSecdefPostAsyncWithHttpInfo (Body body);
        /// <summary>
        /// Get trading schedule for symbol
        /// </summary>
        /// <remarks>
        /// Returns the trading schedule up to a month for the requested contract
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetClass">specify the asset class of the contract. Available values- - Stock: STK, Option: OPT, Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND, Bond: BND, Inter-Commodity Spreads: ICS </param>
        /// <param name="symbol">Underlying Symbol for specified contract, for example &#39;AAPL&#39; for US Stock - Apple Inc.</param>
        /// <param name="exchange">Native exchange for contract, for example &#39;NASDAQ&#39; for US Stock - Apple Inc. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TrsrvSecdefScheduleGetAsync (string assetClass, string symbol, string exchange = null);

        /// <summary>
        /// Get trading schedule for symbol
        /// </summary>
        /// <remarks>
        /// Returns the trading schedule up to a month for the requested contract
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetClass">specify the asset class of the contract. Available values- - Stock: STK, Option: OPT, Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND, Bond: BND, Inter-Commodity Spreads: ICS </param>
        /// <param name="symbol">Underlying Symbol for specified contract, for example &#39;AAPL&#39; for US Stock - Apple Inc.</param>
        /// <param name="exchange">Native exchange for contract, for example &#39;NASDAQ&#39; for US Stock - Apple Inc. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrsrvSecdefScheduleGetAsyncWithHttpInfo (string assetClass, string symbol, string exchange = null);
        /// <summary>
        /// Security Stocks by Symbol
        /// </summary>
        /// <remarks>
        /// Returns an object contains all stock contracts for given symbol(s)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of upper-sensitive symbols separated by comma</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TrsrvStocksGetAsync (string symbols);

        /// <summary>
        /// Security Stocks by Symbol
        /// </summary>
        /// <remarks>
        /// Returns an object contains all stock contracts for given symbol(s)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of upper-sensitive symbols separated by comma</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrsrvStocksGetAsyncWithHttpInfo (string symbols);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContractApi : IContractApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContractApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContractApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Info and Rules Returns trading related rules and info for contract
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">IBKR contract identifier</param>
        /// <param name="isBuy">Side of the market rules apply too. Set to true for Buy Orders, set to false for Sell Orders</param>
        /// <returns>Object</returns>
        public Object IserverContractConidInfoAndRulesGet (string conid, bool? isBuy)
        {
             ApiResponse<Object> localVarResponse = IserverContractConidInfoAndRulesGetWithHttpInfo(conid, isBuy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Info and Rules Returns trading related rules and info for contract
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">IBKR contract identifier</param>
        /// <param name="isBuy">Side of the market rules apply too. Set to true for Buy Orders, set to false for Sell Orders</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > IserverContractConidInfoAndRulesGetWithHttpInfo (string conid, bool? isBuy)
        {
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling ContractApi->IserverContractConidInfoAndRulesGet");
            // verify the required parameter 'isBuy' is set
            if (isBuy == null)
                throw new ApiException(400, "Missing required parameter 'isBuy' when calling ContractApi->IserverContractConidInfoAndRulesGet");

            var localVarPath = "/iserver/contract/{conid}/info-and-rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conid != null) localVarPathParams.Add("conid", this.Configuration.ApiClient.ParameterToString(conid)); // path parameter
            if (isBuy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isBuy", isBuy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverContractConidInfoAndRulesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Info and Rules Returns trading related rules and info for contract
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">IBKR contract identifier</param>
        /// <param name="isBuy">Side of the market rules apply too. Set to true for Buy Orders, set to false for Sell Orders</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IserverContractConidInfoAndRulesGetAsync (string conid, bool? isBuy)
        {
             ApiResponse<Object> localVarResponse = await IserverContractConidInfoAndRulesGetAsyncWithHttpInfo(conid, isBuy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Info and Rules Returns trading related rules and info for contract
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">IBKR contract identifier</param>
        /// <param name="isBuy">Side of the market rules apply too. Set to true for Buy Orders, set to false for Sell Orders</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IserverContractConidInfoAndRulesGetAsyncWithHttpInfo (string conid, bool? isBuy)
        {
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling ContractApi->IserverContractConidInfoAndRulesGet");
            // verify the required parameter 'isBuy' is set
            if (isBuy == null)
                throw new ApiException(400, "Missing required parameter 'isBuy' when calling ContractApi->IserverContractConidInfoAndRulesGet");

            var localVarPath = "/iserver/contract/{conid}/info-and-rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conid != null) localVarPathParams.Add("conid", this.Configuration.ApiClient.ParameterToString(conid)); // path parameter
            if (isBuy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isBuy", isBuy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverContractConidInfoAndRulesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Contract Details Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an order
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Contract</returns>
        public Contract IserverContractConidInfoGet (string conid)
        {
             ApiResponse<Contract> localVarResponse = IserverContractConidInfoGetWithHttpInfo(conid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Contract Details Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an order
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>ApiResponse of Contract</returns>
        public ApiResponse< Contract > IserverContractConidInfoGetWithHttpInfo (string conid)
        {
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling ContractApi->IserverContractConidInfoGet");

            var localVarPath = "/iserver/contract/{conid}/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conid != null) localVarPathParams.Add("conid", this.Configuration.ApiClient.ParameterToString(conid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverContractConidInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contract) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// Contract Details Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an order
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Task of Contract</returns>
        public async System.Threading.Tasks.Task<Contract> IserverContractConidInfoGetAsync (string conid)
        {
             ApiResponse<Contract> localVarResponse = await IserverContractConidInfoGetAsyncWithHttpInfo(conid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Contract Details Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an order
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contract>> IserverContractConidInfoGetAsyncWithHttpInfo (string conid)
        {
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling ContractApi->IserverContractConidInfoGet");

            var localVarPath = "/iserver/contract/{conid}/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conid != null) localVarPathParams.Add("conid", this.Configuration.ApiClient.ParameterToString(conid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverContractConidInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contract) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// Secdef Info Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price for Options/Warrants use \&quot;/iserver/secdef/strikes\&quot; endpoint. Must call /secdef/search for the underlying contract first.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">underlying contract id</param>
        /// <param name="sectype">FUT/OPT/WAR/CASH/CFD</param>
        /// <param name="month">contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00 (optional)</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <param name="strike">optional, only required for OPT/WAR (optional)</param>
        /// <param name="right">C for call, P for put (optional)</param>
        /// <returns>Object</returns>
        public Object IserverSecdefInfoGet (string conid, string sectype, string month = null, string exchange = null, string strike = null, string right = null)
        {
             ApiResponse<Object> localVarResponse = IserverSecdefInfoGetWithHttpInfo(conid, sectype, month, exchange, strike, right);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Secdef Info Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price for Options/Warrants use \&quot;/iserver/secdef/strikes\&quot; endpoint. Must call /secdef/search for the underlying contract first.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">underlying contract id</param>
        /// <param name="sectype">FUT/OPT/WAR/CASH/CFD</param>
        /// <param name="month">contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00 (optional)</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <param name="strike">optional, only required for OPT/WAR (optional)</param>
        /// <param name="right">C for call, P for put (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > IserverSecdefInfoGetWithHttpInfo (string conid, string sectype, string month = null, string exchange = null, string strike = null, string right = null)
        {
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling ContractApi->IserverSecdefInfoGet");
            // verify the required parameter 'sectype' is set
            if (sectype == null)
                throw new ApiException(400, "Missing required parameter 'sectype' when calling ContractApi->IserverSecdefInfoGet");

            var localVarPath = "/iserver/secdef/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conid", conid)); // query parameter
            if (sectype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sectype", sectype)); // query parameter
            if (month != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "month", month)); // query parameter
            if (exchange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange", exchange)); // query parameter
            if (strike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "strike", strike)); // query parameter
            if (right != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "right", right)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverSecdefInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Secdef Info Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price for Options/Warrants use \&quot;/iserver/secdef/strikes\&quot; endpoint. Must call /secdef/search for the underlying contract first.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">underlying contract id</param>
        /// <param name="sectype">FUT/OPT/WAR/CASH/CFD</param>
        /// <param name="month">contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00 (optional)</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <param name="strike">optional, only required for OPT/WAR (optional)</param>
        /// <param name="right">C for call, P for put (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IserverSecdefInfoGetAsync (string conid, string sectype, string month = null, string exchange = null, string strike = null, string right = null)
        {
             ApiResponse<Object> localVarResponse = await IserverSecdefInfoGetAsyncWithHttpInfo(conid, sectype, month, exchange, strike, right);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Secdef Info Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price for Options/Warrants use \&quot;/iserver/secdef/strikes\&quot; endpoint. Must call /secdef/search for the underlying contract first.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">underlying contract id</param>
        /// <param name="sectype">FUT/OPT/WAR/CASH/CFD</param>
        /// <param name="month">contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00 (optional)</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <param name="strike">optional, only required for OPT/WAR (optional)</param>
        /// <param name="right">C for call, P for put (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IserverSecdefInfoGetAsyncWithHttpInfo (string conid, string sectype, string month = null, string exchange = null, string strike = null, string right = null)
        {
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling ContractApi->IserverSecdefInfoGet");
            // verify the required parameter 'sectype' is set
            if (sectype == null)
                throw new ApiException(400, "Missing required parameter 'sectype' when calling ContractApi->IserverSecdefInfoGet");

            var localVarPath = "/iserver/secdef/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conid", conid)); // query parameter
            if (sectype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sectype", sectype)); // query parameter
            if (month != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "month", month)); // query parameter
            if (exchange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange", exchange)); // query parameter
            if (strike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "strike", strike)); // query parameter
            if (right != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "right", right)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverSecdefInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Search by Symbol or Name Search by underlying or company name. Relays back what derivative contract(s) it has. This endpoint must be called before using /secdef/info
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol or Company Name to be searched</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> IserverSecdefSearchPost (Symbol symbol)
        {
             ApiResponse<List<Object>> localVarResponse = IserverSecdefSearchPostWithHttpInfo(symbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search by Symbol or Name Search by underlying or company name. Relays back what derivative contract(s) it has. This endpoint must be called before using /secdef/info
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol or Company Name to be searched</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > IserverSecdefSearchPostWithHttpInfo (Symbol symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ContractApi->IserverSecdefSearchPost");

            var localVarPath = "/iserver/secdef/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null && symbol.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(symbol); // http body (model) parameter
            }
            else
            {
                localVarPostBody = symbol; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverSecdefSearchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Search by Symbol or Name Search by underlying or company name. Relays back what derivative contract(s) it has. This endpoint must be called before using /secdef/info
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol or Company Name to be searched</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> IserverSecdefSearchPostAsync (Symbol symbol)
        {
             ApiResponse<List<Object>> localVarResponse = await IserverSecdefSearchPostAsyncWithHttpInfo(symbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search by Symbol or Name Search by underlying or company name. Relays back what derivative contract(s) it has. This endpoint must be called before using /secdef/info
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol or Company Name to be searched</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> IserverSecdefSearchPostAsyncWithHttpInfo (Symbol symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ContractApi->IserverSecdefSearchPost");

            var localVarPath = "/iserver/secdef/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null && symbol.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(symbol); // http body (model) parameter
            }
            else
            {
                localVarPostBody = symbol; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverSecdefSearchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Search Strikes Query strikes for Options/Warrants. For available contract months and exchanges use \&quot;/iserver/secdef/search\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="sectype">OPT/WAR</param>
        /// <param name="month">contract month</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <returns>Object</returns>
        public Object IserverSecdefStrikesGet (string conid, string sectype, string month, string exchange = null)
        {
             ApiResponse<Object> localVarResponse = IserverSecdefStrikesGetWithHttpInfo(conid, sectype, month, exchange);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Strikes Query strikes for Options/Warrants. For available contract months and exchanges use \&quot;/iserver/secdef/search\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="sectype">OPT/WAR</param>
        /// <param name="month">contract month</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > IserverSecdefStrikesGetWithHttpInfo (string conid, string sectype, string month, string exchange = null)
        {
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling ContractApi->IserverSecdefStrikesGet");
            // verify the required parameter 'sectype' is set
            if (sectype == null)
                throw new ApiException(400, "Missing required parameter 'sectype' when calling ContractApi->IserverSecdefStrikesGet");
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling ContractApi->IserverSecdefStrikesGet");

            var localVarPath = "/iserver/secdef/strikes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conid", conid)); // query parameter
            if (sectype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sectype", sectype)); // query parameter
            if (month != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "month", month)); // query parameter
            if (exchange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange", exchange)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverSecdefStrikesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Search Strikes Query strikes for Options/Warrants. For available contract months and exchanges use \&quot;/iserver/secdef/search\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="sectype">OPT/WAR</param>
        /// <param name="month">contract month</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IserverSecdefStrikesGetAsync (string conid, string sectype, string month, string exchange = null)
        {
             ApiResponse<Object> localVarResponse = await IserverSecdefStrikesGetAsyncWithHttpInfo(conid, sectype, month, exchange);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Strikes Query strikes for Options/Warrants. For available contract months and exchanges use \&quot;/iserver/secdef/search\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="sectype">OPT/WAR</param>
        /// <param name="month">contract month</param>
        /// <param name="exchange">optional, default is SMART (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IserverSecdefStrikesGetAsyncWithHttpInfo (string conid, string sectype, string month, string exchange = null)
        {
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling ContractApi->IserverSecdefStrikesGet");
            // verify the required parameter 'sectype' is set
            if (sectype == null)
                throw new ApiException(400, "Missing required parameter 'sectype' when calling ContractApi->IserverSecdefStrikesGet");
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling ContractApi->IserverSecdefStrikesGet");

            var localVarPath = "/iserver/secdef/strikes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conid", conid)); // query parameter
            if (sectype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sectype", sectype)); // query parameter
            if (month != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "month", month)); // query parameter
            if (exchange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange", exchange)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverSecdefStrikesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Security Futures by Symbol Returns a list of non-expired future contracts for given symbol(s)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of case-sensitive symbols separated by comma</param>
        /// <returns>Object</returns>
        public Object TrsrvFuturesGet (string symbols)
        {
             ApiResponse<Object> localVarResponse = TrsrvFuturesGetWithHttpInfo(symbols);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Security Futures by Symbol Returns a list of non-expired future contracts for given symbol(s)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of case-sensitive symbols separated by comma</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TrsrvFuturesGetWithHttpInfo (string symbols)
        {
            // verify the required parameter 'symbols' is set
            if (symbols == null)
                throw new ApiException(400, "Missing required parameter 'symbols' when calling ContractApi->TrsrvFuturesGet");

            var localVarPath = "/trsrv/futures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbols != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbols", symbols)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrsrvFuturesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Security Futures by Symbol Returns a list of non-expired future contracts for given symbol(s)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of case-sensitive symbols separated by comma</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TrsrvFuturesGetAsync (string symbols)
        {
             ApiResponse<Object> localVarResponse = await TrsrvFuturesGetAsyncWithHttpInfo(symbols);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Security Futures by Symbol Returns a list of non-expired future contracts for given symbol(s)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of case-sensitive symbols separated by comma</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrsrvFuturesGetAsyncWithHttpInfo (string symbols)
        {
            // verify the required parameter 'symbols' is set
            if (symbols == null)
                throw new ApiException(400, "Missing required parameter 'symbols' when calling ContractApi->TrsrvFuturesGet");

            var localVarPath = "/trsrv/futures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbols != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbols", symbols)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrsrvFuturesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Secdef by Conid Returns a list of security definitions for the given conids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request body</param>
        /// <returns>Secdef</returns>
        public Secdef TrsrvSecdefPost (Body body)
        {
             ApiResponse<Secdef> localVarResponse = TrsrvSecdefPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Secdef by Conid Returns a list of security definitions for the given conids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request body</param>
        /// <returns>ApiResponse of Secdef</returns>
        public ApiResponse< Secdef > TrsrvSecdefPostWithHttpInfo (Body body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContractApi->TrsrvSecdefPost");

            var localVarPath = "/trsrv/secdef";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrsrvSecdefPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Secdef>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Secdef) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Secdef)));
        }

        /// <summary>
        /// Secdef by Conid Returns a list of security definitions for the given conids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request body</param>
        /// <returns>Task of Secdef</returns>
        public async System.Threading.Tasks.Task<Secdef> TrsrvSecdefPostAsync (Body body)
        {
             ApiResponse<Secdef> localVarResponse = await TrsrvSecdefPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Secdef by Conid Returns a list of security definitions for the given conids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request body</param>
        /// <returns>Task of ApiResponse (Secdef)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Secdef>> TrsrvSecdefPostAsyncWithHttpInfo (Body body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContractApi->TrsrvSecdefPost");

            var localVarPath = "/trsrv/secdef";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrsrvSecdefPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Secdef>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Secdef) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Secdef)));
        }

        /// <summary>
        /// Get trading schedule for symbol Returns the trading schedule up to a month for the requested contract
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetClass">specify the asset class of the contract. Available values- - Stock: STK, Option: OPT, Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND, Bond: BND, Inter-Commodity Spreads: ICS </param>
        /// <param name="symbol">Underlying Symbol for specified contract, for example &#39;AAPL&#39; for US Stock - Apple Inc.</param>
        /// <param name="exchange">Native exchange for contract, for example &#39;NASDAQ&#39; for US Stock - Apple Inc. (optional)</param>
        /// <returns>Object</returns>
        public Object TrsrvSecdefScheduleGet (string assetClass, string symbol, string exchange = null)
        {
             ApiResponse<Object> localVarResponse = TrsrvSecdefScheduleGetWithHttpInfo(assetClass, symbol, exchange);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get trading schedule for symbol Returns the trading schedule up to a month for the requested contract
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetClass">specify the asset class of the contract. Available values- - Stock: STK, Option: OPT, Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND, Bond: BND, Inter-Commodity Spreads: ICS </param>
        /// <param name="symbol">Underlying Symbol for specified contract, for example &#39;AAPL&#39; for US Stock - Apple Inc.</param>
        /// <param name="exchange">Native exchange for contract, for example &#39;NASDAQ&#39; for US Stock - Apple Inc. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TrsrvSecdefScheduleGetWithHttpInfo (string assetClass, string symbol, string exchange = null)
        {
            // verify the required parameter 'assetClass' is set
            if (assetClass == null)
                throw new ApiException(400, "Missing required parameter 'assetClass' when calling ContractApi->TrsrvSecdefScheduleGet");
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ContractApi->TrsrvSecdefScheduleGet");

            var localVarPath = "/trsrv/secdef/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetClass", assetClass)); // query parameter
            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (exchange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange", exchange)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrsrvSecdefScheduleGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get trading schedule for symbol Returns the trading schedule up to a month for the requested contract
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetClass">specify the asset class of the contract. Available values- - Stock: STK, Option: OPT, Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND, Bond: BND, Inter-Commodity Spreads: ICS </param>
        /// <param name="symbol">Underlying Symbol for specified contract, for example &#39;AAPL&#39; for US Stock - Apple Inc.</param>
        /// <param name="exchange">Native exchange for contract, for example &#39;NASDAQ&#39; for US Stock - Apple Inc. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TrsrvSecdefScheduleGetAsync (string assetClass, string symbol, string exchange = null)
        {
             ApiResponse<Object> localVarResponse = await TrsrvSecdefScheduleGetAsyncWithHttpInfo(assetClass, symbol, exchange);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get trading schedule for symbol Returns the trading schedule up to a month for the requested contract
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetClass">specify the asset class of the contract. Available values- - Stock: STK, Option: OPT, Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND, Bond: BND, Inter-Commodity Spreads: ICS </param>
        /// <param name="symbol">Underlying Symbol for specified contract, for example &#39;AAPL&#39; for US Stock - Apple Inc.</param>
        /// <param name="exchange">Native exchange for contract, for example &#39;NASDAQ&#39; for US Stock - Apple Inc. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrsrvSecdefScheduleGetAsyncWithHttpInfo (string assetClass, string symbol, string exchange = null)
        {
            // verify the required parameter 'assetClass' is set
            if (assetClass == null)
                throw new ApiException(400, "Missing required parameter 'assetClass' when calling ContractApi->TrsrvSecdefScheduleGet");
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ContractApi->TrsrvSecdefScheduleGet");

            var localVarPath = "/trsrv/secdef/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetClass", assetClass)); // query parameter
            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (exchange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange", exchange)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrsrvSecdefScheduleGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Security Stocks by Symbol Returns an object contains all stock contracts for given symbol(s)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of upper-sensitive symbols separated by comma</param>
        /// <returns>Object</returns>
        public Object TrsrvStocksGet (string symbols)
        {
             ApiResponse<Object> localVarResponse = TrsrvStocksGetWithHttpInfo(symbols);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Security Stocks by Symbol Returns an object contains all stock contracts for given symbol(s)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of upper-sensitive symbols separated by comma</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TrsrvStocksGetWithHttpInfo (string symbols)
        {
            // verify the required parameter 'symbols' is set
            if (symbols == null)
                throw new ApiException(400, "Missing required parameter 'symbols' when calling ContractApi->TrsrvStocksGet");

            var localVarPath = "/trsrv/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbols != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbols", symbols)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrsrvStocksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Security Stocks by Symbol Returns an object contains all stock contracts for given symbol(s)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of upper-sensitive symbols separated by comma</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TrsrvStocksGetAsync (string symbols)
        {
             ApiResponse<Object> localVarResponse = await TrsrvStocksGetAsyncWithHttpInfo(symbols);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Security Stocks by Symbol Returns an object contains all stock contracts for given symbol(s)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">list of upper-sensitive symbols separated by comma</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrsrvStocksGetAsyncWithHttpInfo (string symbols)
        {
            // verify the required parameter 'symbols' is set
            if (symbols == null)
                throw new ApiException(400, "Missing required parameter 'symbols' when calling ContractApi->TrsrvStocksGet");

            var localVarPath = "/trsrv/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbols != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbols", symbols)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrsrvStocksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
