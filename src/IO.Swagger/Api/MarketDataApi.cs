/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Market Data Cancel (Single)
        /// </summary>
        /// <remarks>
        /// Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Object</returns>
        Object IserverMarketdataConidUnsubscribeGet (string conid);

        /// <summary>
        /// Market Data Cancel (Single)
        /// </summary>
        /// <remarks>
        /// Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IserverMarketdataConidUnsubscribeGetWithHttpInfo (string conid);
        /// <summary>
        /// Market Data History
        /// </summary>
        /// <remarks>
        /// Get historical market Data for given conid, length of data is controlled by &#39;period&#39; and &#39;bar&#39;. Formatted as: min&#x3D;minute, h&#x3D;hour, d&#x3D;day, w&#x3D;week, m&#x3D;month, y&#x3D;year e.g. period &#x3D;1y with bar &#x3D;1w returns 52 data points (Max of 1000 data points supported). **Note**: There&#39;s a limit of 5 concurrent requests. Excessive requests will return a &#39;Too many requests&#39; status 429 response. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="period">available time period- - {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y</param>
        /// <param name="exchange">Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to primary exchange of the conid. (optional)</param>
        /// <param name="bar">possible value- - 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m (optional)</param>
        /// <param name="outsideRth">For contracts that support it, will determine if historical data includes outside of regular trading hours. (optional)</param>
        /// <returns>HistoryData</returns>
        HistoryData IserverMarketdataHistoryGet (string conid, string period, string exchange = null, string bar = null, bool? outsideRth = null);

        /// <summary>
        /// Market Data History
        /// </summary>
        /// <remarks>
        /// Get historical market Data for given conid, length of data is controlled by &#39;period&#39; and &#39;bar&#39;. Formatted as: min&#x3D;minute, h&#x3D;hour, d&#x3D;day, w&#x3D;week, m&#x3D;month, y&#x3D;year e.g. period &#x3D;1y with bar &#x3D;1w returns 52 data points (Max of 1000 data points supported). **Note**: There&#39;s a limit of 5 concurrent requests. Excessive requests will return a &#39;Too many requests&#39; status 429 response. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="period">available time period- - {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y</param>
        /// <param name="exchange">Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to primary exchange of the conid. (optional)</param>
        /// <param name="bar">possible value- - 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m (optional)</param>
        /// <param name="outsideRth">For contracts that support it, will determine if historical data includes outside of regular trading hours. (optional)</param>
        /// <returns>ApiResponse of HistoryData</returns>
        ApiResponse<HistoryData> IserverMarketdataHistoryGetWithHttpInfo (string conid, string period, string exchange = null, string bar = null, bool? outsideRth = null);
        /// <summary>
        /// Market Data
        /// </summary>
        /// <remarks>
        /// Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first. First /snapshot endpoint call for given conid will initiate the market data request.  To receive all available fields the /snapshot endpoint will need to be called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conids">list of conids separated by comma</param>
        /// <param name="since">time period since which updates are required. uses epoch time with milliseconds. (optional)</param>
        /// <param name="fields">list of fields separated by comma (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> IserverMarketdataSnapshotGet (string conids, int? since = null, string fields = null);

        /// <summary>
        /// Market Data
        /// </summary>
        /// <remarks>
        /// Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first. First /snapshot endpoint call for given conid will initiate the market data request.  To receive all available fields the /snapshot endpoint will need to be called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conids">list of conids separated by comma</param>
        /// <param name="since">time period since which updates are required. uses epoch time with milliseconds. (optional)</param>
        /// <param name="fields">list of fields separated by comma (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> IserverMarketdataSnapshotGetWithHttpInfo (string conids, int? since = null, string fields = null);
        /// <summary>
        /// Market Data Cancel (All)
        /// </summary>
        /// <remarks>
        /// Cancel all market data request(s). To cancel market data for given conid, see /iserver/marketdata/{conid}/unsubscribe.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object IserverMarketdataUnsubscribeallGet ();

        /// <summary>
        /// Market Data Cancel (All)
        /// </summary>
        /// <remarks>
        /// Cancel all market data request(s). To cancel market data for given conid, see /iserver/marketdata/{conid}/unsubscribe.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IserverMarketdataUnsubscribeallGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Market Data Cancel (Single)
        /// </summary>
        /// <remarks>
        /// Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IserverMarketdataConidUnsubscribeGetAsync (string conid);

        /// <summary>
        /// Market Data Cancel (Single)
        /// </summary>
        /// <remarks>
        /// Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IserverMarketdataConidUnsubscribeGetAsyncWithHttpInfo (string conid);
        /// <summary>
        /// Market Data History
        /// </summary>
        /// <remarks>
        /// Get historical market Data for given conid, length of data is controlled by &#39;period&#39; and &#39;bar&#39;. Formatted as: min&#x3D;minute, h&#x3D;hour, d&#x3D;day, w&#x3D;week, m&#x3D;month, y&#x3D;year e.g. period &#x3D;1y with bar &#x3D;1w returns 52 data points (Max of 1000 data points supported). **Note**: There&#39;s a limit of 5 concurrent requests. Excessive requests will return a &#39;Too many requests&#39; status 429 response. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="period">available time period- - {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y</param>
        /// <param name="exchange">Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to primary exchange of the conid. (optional)</param>
        /// <param name="bar">possible value- - 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m (optional)</param>
        /// <param name="outsideRth">For contracts that support it, will determine if historical data includes outside of regular trading hours. (optional)</param>
        /// <returns>Task of HistoryData</returns>
        System.Threading.Tasks.Task<HistoryData> IserverMarketdataHistoryGetAsync (string conid, string period, string exchange = null, string bar = null, bool? outsideRth = null);

        /// <summary>
        /// Market Data History
        /// </summary>
        /// <remarks>
        /// Get historical market Data for given conid, length of data is controlled by &#39;period&#39; and &#39;bar&#39;. Formatted as: min&#x3D;minute, h&#x3D;hour, d&#x3D;day, w&#x3D;week, m&#x3D;month, y&#x3D;year e.g. period &#x3D;1y with bar &#x3D;1w returns 52 data points (Max of 1000 data points supported). **Note**: There&#39;s a limit of 5 concurrent requests. Excessive requests will return a &#39;Too many requests&#39; status 429 response. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="period">available time period- - {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y</param>
        /// <param name="exchange">Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to primary exchange of the conid. (optional)</param>
        /// <param name="bar">possible value- - 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m (optional)</param>
        /// <param name="outsideRth">For contracts that support it, will determine if historical data includes outside of regular trading hours. (optional)</param>
        /// <returns>Task of ApiResponse (HistoryData)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryData>> IserverMarketdataHistoryGetAsyncWithHttpInfo (string conid, string period, string exchange = null, string bar = null, bool? outsideRth = null);
        /// <summary>
        /// Market Data
        /// </summary>
        /// <remarks>
        /// Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first. First /snapshot endpoint call for given conid will initiate the market data request.  To receive all available fields the /snapshot endpoint will need to be called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conids">list of conids separated by comma</param>
        /// <param name="since">time period since which updates are required. uses epoch time with milliseconds. (optional)</param>
        /// <param name="fields">list of fields separated by comma (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> IserverMarketdataSnapshotGetAsync (string conids, int? since = null, string fields = null);

        /// <summary>
        /// Market Data
        /// </summary>
        /// <remarks>
        /// Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first. First /snapshot endpoint call for given conid will initiate the market data request.  To receive all available fields the /snapshot endpoint will need to be called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conids">list of conids separated by comma</param>
        /// <param name="since">time period since which updates are required. uses epoch time with milliseconds. (optional)</param>
        /// <param name="fields">list of fields separated by comma (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> IserverMarketdataSnapshotGetAsyncWithHttpInfo (string conids, int? since = null, string fields = null);
        /// <summary>
        /// Market Data Cancel (All)
        /// </summary>
        /// <remarks>
        /// Cancel all market data request(s). To cancel market data for given conid, see /iserver/marketdata/{conid}/unsubscribe.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IserverMarketdataUnsubscribeallGetAsync ();

        /// <summary>
        /// Market Data Cancel (All)
        /// </summary>
        /// <remarks>
        /// Cancel all market data request(s). To cancel market data for given conid, see /iserver/marketdata/{conid}/unsubscribe.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IserverMarketdataUnsubscribeallGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarketDataApi : IMarketDataApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketDataApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarketDataApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Market Data Cancel (Single) Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Object</returns>
        public Object IserverMarketdataConidUnsubscribeGet (string conid)
        {
             ApiResponse<Object> localVarResponse = IserverMarketdataConidUnsubscribeGetWithHttpInfo(conid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Market Data Cancel (Single) Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > IserverMarketdataConidUnsubscribeGetWithHttpInfo (string conid)
        {
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling MarketDataApi->IserverMarketdataConidUnsubscribeGet");

            var localVarPath = "/iserver/marketdata/{conid}/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conid != null) localVarPathParams.Add("conid", this.Configuration.ApiClient.ParameterToString(conid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverMarketdataConidUnsubscribeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Market Data Cancel (Single) Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IserverMarketdataConidUnsubscribeGetAsync (string conid)
        {
             ApiResponse<Object> localVarResponse = await IserverMarketdataConidUnsubscribeGetAsyncWithHttpInfo(conid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Market Data Cancel (Single) Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IserverMarketdataConidUnsubscribeGetAsyncWithHttpInfo (string conid)
        {
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling MarketDataApi->IserverMarketdataConidUnsubscribeGet");

            var localVarPath = "/iserver/marketdata/{conid}/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conid != null) localVarPathParams.Add("conid", this.Configuration.ApiClient.ParameterToString(conid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverMarketdataConidUnsubscribeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Market Data History Get historical market Data for given conid, length of data is controlled by &#39;period&#39; and &#39;bar&#39;. Formatted as: min&#x3D;minute, h&#x3D;hour, d&#x3D;day, w&#x3D;week, m&#x3D;month, y&#x3D;year e.g. period &#x3D;1y with bar &#x3D;1w returns 52 data points (Max of 1000 data points supported). **Note**: There&#39;s a limit of 5 concurrent requests. Excessive requests will return a &#39;Too many requests&#39; status 429 response. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="period">available time period- - {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y</param>
        /// <param name="exchange">Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to primary exchange of the conid. (optional)</param>
        /// <param name="bar">possible value- - 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m (optional)</param>
        /// <param name="outsideRth">For contracts that support it, will determine if historical data includes outside of regular trading hours. (optional)</param>
        /// <returns>HistoryData</returns>
        public HistoryData IserverMarketdataHistoryGet (string conid, string period, string exchange = null, string bar = null, bool? outsideRth = null)
        {
             ApiResponse<HistoryData> localVarResponse = IserverMarketdataHistoryGetWithHttpInfo(conid, period, exchange, bar, outsideRth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Market Data History Get historical market Data for given conid, length of data is controlled by &#39;period&#39; and &#39;bar&#39;. Formatted as: min&#x3D;minute, h&#x3D;hour, d&#x3D;day, w&#x3D;week, m&#x3D;month, y&#x3D;year e.g. period &#x3D;1y with bar &#x3D;1w returns 52 data points (Max of 1000 data points supported). **Note**: There&#39;s a limit of 5 concurrent requests. Excessive requests will return a &#39;Too many requests&#39; status 429 response. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="period">available time period- - {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y</param>
        /// <param name="exchange">Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to primary exchange of the conid. (optional)</param>
        /// <param name="bar">possible value- - 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m (optional)</param>
        /// <param name="outsideRth">For contracts that support it, will determine if historical data includes outside of regular trading hours. (optional)</param>
        /// <returns>ApiResponse of HistoryData</returns>
        public ApiResponse< HistoryData > IserverMarketdataHistoryGetWithHttpInfo (string conid, string period, string exchange = null, string bar = null, bool? outsideRth = null)
        {
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling MarketDataApi->IserverMarketdataHistoryGet");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling MarketDataApi->IserverMarketdataHistoryGet");

            var localVarPath = "/iserver/marketdata/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conid", conid)); // query parameter
            if (exchange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange", exchange)); // query parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter
            if (bar != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bar", bar)); // query parameter
            if (outsideRth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outsideRth", outsideRth)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverMarketdataHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HistoryData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HistoryData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoryData)));
        }

        /// <summary>
        /// Market Data History Get historical market Data for given conid, length of data is controlled by &#39;period&#39; and &#39;bar&#39;. Formatted as: min&#x3D;minute, h&#x3D;hour, d&#x3D;day, w&#x3D;week, m&#x3D;month, y&#x3D;year e.g. period &#x3D;1y with bar &#x3D;1w returns 52 data points (Max of 1000 data points supported). **Note**: There&#39;s a limit of 5 concurrent requests. Excessive requests will return a &#39;Too many requests&#39; status 429 response. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="period">available time period- - {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y</param>
        /// <param name="exchange">Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to primary exchange of the conid. (optional)</param>
        /// <param name="bar">possible value- - 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m (optional)</param>
        /// <param name="outsideRth">For contracts that support it, will determine if historical data includes outside of regular trading hours. (optional)</param>
        /// <returns>Task of HistoryData</returns>
        public async System.Threading.Tasks.Task<HistoryData> IserverMarketdataHistoryGetAsync (string conid, string period, string exchange = null, string bar = null, bool? outsideRth = null)
        {
             ApiResponse<HistoryData> localVarResponse = await IserverMarketdataHistoryGetAsyncWithHttpInfo(conid, period, exchange, bar, outsideRth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Market Data History Get historical market Data for given conid, length of data is controlled by &#39;period&#39; and &#39;bar&#39;. Formatted as: min&#x3D;minute, h&#x3D;hour, d&#x3D;day, w&#x3D;week, m&#x3D;month, y&#x3D;year e.g. period &#x3D;1y with bar &#x3D;1w returns 52 data points (Max of 1000 data points supported). **Note**: There&#39;s a limit of 5 concurrent requests. Excessive requests will return a &#39;Too many requests&#39; status 429 response. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conid">contract id</param>
        /// <param name="period">available time period- - {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y</param>
        /// <param name="exchange">Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to primary exchange of the conid. (optional)</param>
        /// <param name="bar">possible value- - 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m (optional)</param>
        /// <param name="outsideRth">For contracts that support it, will determine if historical data includes outside of regular trading hours. (optional)</param>
        /// <returns>Task of ApiResponse (HistoryData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HistoryData>> IserverMarketdataHistoryGetAsyncWithHttpInfo (string conid, string period, string exchange = null, string bar = null, bool? outsideRth = null)
        {
            // verify the required parameter 'conid' is set
            if (conid == null)
                throw new ApiException(400, "Missing required parameter 'conid' when calling MarketDataApi->IserverMarketdataHistoryGet");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling MarketDataApi->IserverMarketdataHistoryGet");

            var localVarPath = "/iserver/marketdata/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conid", conid)); // query parameter
            if (exchange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange", exchange)); // query parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter
            if (bar != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bar", bar)); // query parameter
            if (outsideRth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outsideRth", outsideRth)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverMarketdataHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HistoryData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HistoryData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoryData)));
        }

        /// <summary>
        /// Market Data Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first. First /snapshot endpoint call for given conid will initiate the market data request.  To receive all available fields the /snapshot endpoint will need to be called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conids">list of conids separated by comma</param>
        /// <param name="since">time period since which updates are required. uses epoch time with milliseconds. (optional)</param>
        /// <param name="fields">list of fields separated by comma (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> IserverMarketdataSnapshotGet (string conids, int? since = null, string fields = null)
        {
             ApiResponse<List<Object>> localVarResponse = IserverMarketdataSnapshotGetWithHttpInfo(conids, since, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Market Data Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first. First /snapshot endpoint call for given conid will initiate the market data request.  To receive all available fields the /snapshot endpoint will need to be called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conids">list of conids separated by comma</param>
        /// <param name="since">time period since which updates are required. uses epoch time with milliseconds. (optional)</param>
        /// <param name="fields">list of fields separated by comma (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > IserverMarketdataSnapshotGetWithHttpInfo (string conids, int? since = null, string fields = null)
        {
            // verify the required parameter 'conids' is set
            if (conids == null)
                throw new ApiException(400, "Missing required parameter 'conids' when calling MarketDataApi->IserverMarketdataSnapshotGet");

            var localVarPath = "/iserver/marketdata/snapshot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conids", conids)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverMarketdataSnapshotGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Market Data Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first. First /snapshot endpoint call for given conid will initiate the market data request.  To receive all available fields the /snapshot endpoint will need to be called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conids">list of conids separated by comma</param>
        /// <param name="since">time period since which updates are required. uses epoch time with milliseconds. (optional)</param>
        /// <param name="fields">list of fields separated by comma (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> IserverMarketdataSnapshotGetAsync (string conids, int? since = null, string fields = null)
        {
             ApiResponse<List<Object>> localVarResponse = await IserverMarketdataSnapshotGetAsyncWithHttpInfo(conids, since, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Market Data Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first. First /snapshot endpoint call for given conid will initiate the market data request.  To receive all available fields the /snapshot endpoint will need to be called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conids">list of conids separated by comma</param>
        /// <param name="since">time period since which updates are required. uses epoch time with milliseconds. (optional)</param>
        /// <param name="fields">list of fields separated by comma (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> IserverMarketdataSnapshotGetAsyncWithHttpInfo (string conids, int? since = null, string fields = null)
        {
            // verify the required parameter 'conids' is set
            if (conids == null)
                throw new ApiException(400, "Missing required parameter 'conids' when calling MarketDataApi->IserverMarketdataSnapshotGet");

            var localVarPath = "/iserver/marketdata/snapshot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conids", conids)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverMarketdataSnapshotGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Market Data Cancel (All) Cancel all market data request(s). To cancel market data for given conid, see /iserver/marketdata/{conid}/unsubscribe.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object IserverMarketdataUnsubscribeallGet ()
        {
             ApiResponse<Object> localVarResponse = IserverMarketdataUnsubscribeallGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Market Data Cancel (All) Cancel all market data request(s). To cancel market data for given conid, see /iserver/marketdata/{conid}/unsubscribe.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > IserverMarketdataUnsubscribeallGetWithHttpInfo ()
        {

            var localVarPath = "/iserver/marketdata/unsubscribeall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverMarketdataUnsubscribeallGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Market Data Cancel (All) Cancel all market data request(s). To cancel market data for given conid, see /iserver/marketdata/{conid}/unsubscribe.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IserverMarketdataUnsubscribeallGetAsync ()
        {
             ApiResponse<Object> localVarResponse = await IserverMarketdataUnsubscribeallGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Market Data Cancel (All) Cancel all market data request(s). To cancel market data for given conid, see /iserver/marketdata/{conid}/unsubscribe.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IserverMarketdataUnsubscribeallGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/iserver/marketdata/unsubscribeall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IserverMarketdataUnsubscribeallGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
