/* 
 * Client Portal Web API
 *
 * Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ContractApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ContractApiTests
    {
        private ContractApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ContractApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ContractApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ContractApi
            //Assert.IsInstanceOfType(typeof(ContractApi), instance, "instance is a ContractApi");
        }

        
        /// <summary>
        /// Test IserverContractConidInfoAndRulesGet
        /// </summary>
        [Test]
        public void IserverContractConidInfoAndRulesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conid = null;
            //bool? isBuy = null;
            //var response = instance.IserverContractConidInfoAndRulesGet(conid, isBuy);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test IserverContractConidInfoGet
        /// </summary>
        [Test]
        public void IserverContractConidInfoGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conid = null;
            //var response = instance.IserverContractConidInfoGet(conid);
            //Assert.IsInstanceOf<Contract> (response, "response is Contract");
        }
        
        /// <summary>
        /// Test IserverSecdefInfoGet
        /// </summary>
        [Test]
        public void IserverSecdefInfoGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conid = null;
            //string sectype = null;
            //string month = null;
            //string exchange = null;
            //string strike = null;
            //string right = null;
            //var response = instance.IserverSecdefInfoGet(conid, sectype, month, exchange, strike, right);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test IserverSecdefSearchPost
        /// </summary>
        [Test]
        public void IserverSecdefSearchPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Symbol symbol = null;
            //var response = instance.IserverSecdefSearchPost(symbol);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        
        /// <summary>
        /// Test IserverSecdefStrikesGet
        /// </summary>
        [Test]
        public void IserverSecdefStrikesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conid = null;
            //string sectype = null;
            //string month = null;
            //string exchange = null;
            //var response = instance.IserverSecdefStrikesGet(conid, sectype, month, exchange);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TrsrvFuturesGet
        /// </summary>
        [Test]
        public void TrsrvFuturesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbols = null;
            //var response = instance.TrsrvFuturesGet(symbols);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TrsrvSecdefPost
        /// </summary>
        [Test]
        public void TrsrvSecdefPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body body = null;
            //var response = instance.TrsrvSecdefPost(body);
            //Assert.IsInstanceOf<Secdef> (response, "response is Secdef");
        }
        
        /// <summary>
        /// Test TrsrvSecdefScheduleGet
        /// </summary>
        [Test]
        public void TrsrvSecdefScheduleGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetClass = null;
            //string symbol = null;
            //string exchange = null;
            //var response = instance.TrsrvSecdefScheduleGet(assetClass, symbol, exchange);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TrsrvStocksGet
        /// </summary>
        [Test]
        public void TrsrvStocksGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbols = null;
            //var response = instance.TrsrvStocksGet(symbols);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
    }

}
